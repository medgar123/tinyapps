#!/bin/sh
##
## gzip to bzip2 converter
## $Id: gz2bz,v 1.5 2007/01/31 19:10:45 mina86 Exp $
## Copyright (c) 2005 by Michal Nazareicz (mina86/AT/mina86.com)
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##


set -e


##
## Version
##
version () {
	echo 'gz2bz   (c) 2005 by Michal Nazarewicz (mina86/AT/mina86.com)'
	echo '$Id: gz2bz,v 1.5 2007/01/31 19:10:45 mina86 Exp $'
	echo
}


##
## Usage
##
usage () {
	cat <<EOF
usage: gz2bz <options> [ [--] file ...]
<options> are:
 -h --help              Prints this help screen and exits
 -V --verson            Prints version information and exits

 -v --verbose           Becomes more verbose
 -vv                    Becomes even more verbose
 -q --quiet             Supresses all noncritical messages

 -i --interactive       Prompt before overwrite
    --never-overwrite   Never overwrite files

 -1 .. -9               Set compression method
    --fast              Alias of -1
    --best              Alias of -9

 -G --gzip=<gzip>       Uses <gzip> as gzip executable
 -g --gzip-opts=<opts>  Adds additional arguments to gzip
 -B --bzip2=<bzip2>     Uses <bzip2> as bzip2 executable
 -b --bzip2-opts=<opts> Adds additional arguments to bzip2

 -k --keep              Keeps uncompressed file
    --keep-gz           Keeps .gz file
 -K --keep-both         Alias of --keep --keep-gz
EOF
}


##
## Prints message if -f given or verbose
##
msg () {
	if [ X"$1" = X-f ]; then
		shift
		echo "${0##*/}: $*" >&2
	elif [ -n "$VERBOSE" ]; then
		echo "${0##*/}: $*" >&2
	fi
}



##
## Variables
##
GZIP=auto
BZIP2=auto
GZ_OPTS=
BZ2_OPTS=
KEEP_UNCOMPRESSED=
KEEP_GZIP=
VERBOSE=
VERB_OPTS=
OVERWRITE=y


##
## Parse args
##
while [ $# -ne 0 ] && [ X"$1" != X-- ]; do
	case "$1" in
	(-h|--help)    usage  ; exit; ;;
	(-V|--version) version; exit; ;;

	(-v|--verbose)   VERBOSE=y; VERB_OPTS=-v ;;
	(-vv)            VERBOSE=y; VERB_OPTS=-vv;;
	(-q|--quiet)     VERBOSE= ; VERB_OPTS=-q ;;

	(-i|--interactive)  OVERWRITE= ;;
	(--never-overwrite) OVERWRITE=n;;

	(-[0-9])         BZ2_OPTS="$BZ2_OPTS $1"; ;;
	(--fast)         BZ2_OPTS="$BZ2_OPTS -1"; ;;
	(--best)         BZ2_OPTS="$BZ2_OPTS -9"; ;;

	(-G)             GZIP="$2"                       ; shift; ;;
	(-G*)            GZIP="${1#-?}"                         ; ;;
	(--gzip=*)       GZIP="${1#*=}"                         ; ;;
	(-g)             GZIP_OPTS="$GZIP_OPTS $2"       ; shift; ;;
	(-g*)            GZIP_OPTS="$GZIP_OPTS ${1#-?}"         ; ;;
	(--gzip-opts=*)  GZIP_OPTS="$GZIP_OPTS ${1#*=}"         ; ;;
	(-B)             BZIP2="$2"                      ; shift; ;;
	(-B*)            BZIP2="${1#-?}"                        ; ;;
	(--bzip2=*)      BZIP2="${1#*=}"                        ; ;;
	(-b)             BZIP2_OPTS="$BZIP2_OPTS $2"     ; shift; ;;
	(-b*)            BZIP2_OPTS="$BZIP2_OPTS ${1#-?}"       ; ;;
	(--bzip2-opts=*) BZIP2_OPTS="$BZIP2_OPTS ${1#*=}"       ; ;;

	(-k|--keep)      KEEP_UNCOMPRESSED=y             ; ;;
	(--keep-gz)                           KEEP_GZIP=y; ;;
	(-K|--keep-both) KEEP_UNCOMPRESSED=y; KEEP_GZIP=y; ;;

	(-*) echo "${0##*/}: Invalid argument: $1" >&2; exit 1; ;;
	(*) break; ;;
	esac
	shift
done
[ X"$1" != X-- ] || shift
GZIP_OPTS="$GZIP_OPTS $VERB_OPTS"
BZIP2_OPTS="$BZIP2_OPTS $VERB_OPTS"
unset VERB_OPTS


##
## Find executables, etc
##
find_exec () {
	if [ "X$3" = Xauto ]; then __SEARCH="$2"; else __SEARCH="$3"; fi
	if ! __FOUND=$(which "$__SEARCH"); then
		echo "${0##*/}: Could not find $2 executable:" >&2
		exit 2
	fi
	eval $1=\"\$__FOUND \$4\"
}

# find_exec VAR  def-exec opt-exec  opts
find_exec   GZ   gzip     "$GZIP"   "$GZIP_OPTS -d"
find_exec   BZ2  bzip2    "$BZIP2"  "$BZIP2_OPTS"
unset GZIP GZIP_OPTS BZIP2 BZIP2_OPTS


##
## Ask whether to overwrite a file
##
overwrite () {
	[ X"$OVERWRITE" != Xy ] || return 0

	while [ $# -gt 0 ]; do
		if ! [ -e "$1" ]; then
			shift
			continue
		fi

		if [ -d "$1" ]; then
			msg -f "$1: is a directory"
			return 1
		fi

		if [ X"$OVERWRITE" = Xn ]; then
			msg -f "$1: exists; not overwriting"
			return 1
		fi

		while :; do
			printf '%s: %s: exists; overwrite? [Y/n]: ' "${0##*/}" "$1"
			read __OVERWRITE || __OVERWRITE=n
			[ -n "$__OVERWRITE" ] || __OVERWRITE=y
			__OVERWRITE=$(echo "X$__OVERWRITE" | tr YESNO yesno)
			if   [ "$__OVERWRITE" = Xn ] || [ "$__OVERWRITE" = Xno  ]; then return 1
			elif [ "$__OVERWRITE" = Xy ] || [ "$__OVERWRITE" = Xyes ]; then break
			fi
		done

		shift
	done
}



##
## Do the job
##
[ $# -ne 0 ] || set -- -
for FILE; do
	## stdin
	if [ X"$FILE" = X- ]; then
		msg Converting stdin to stdout
		$GZ | $BZ2 || true
		continue
	fi

	## Get output file name
	case "$FILE" in
	(*.tgz) OUTPUT="${FILE%.tgz}.tar" ;;
	(*.gz)  OUTPUT="${FILE%.gz}" ;;
	(*) msg -f "$FILE: invalid extension, skipping"; continue
	esac

	# Overwrite
	if [ -z "$KEEP_UNCOMPRESSED" ]; then
		overwrite "$OUTPUT.bz2" || continue
	else
		overwrite "$OUTPUT" "$OUTPUT.bz2" || continue
	fi

	OK=
	## Convert
	if [ -z "$KEEP_UNCOMPRESSED" ]; then
		msg converting "$FILE" to "$OUTPUT.bz2"
		if ! $GZ <"$FILE" | $BZ2 >"$OUTPUT.bz2"; then
			rm -f -- "$OUTPUT.bz2"
		else
			OK=y
		fi
	else
		msg decompressing "$FILE" to "$OUTPUT"
		if ! $GZ <"$FILE" >"$OUTPUT"; then
			rm -f -- "$OUTPUT"
		else
			msg compressing "$OUTPUT" to "$OUTPUT.bz2"
			if ! $BZ2 <"$OUTPUT" >"$OUTPUT.bz2"; then
				rm -f -- "$OUTPUT.bz2"
			else
				OK=y
			fi
		fi
	fi

	## Finish
	if [ -z "$OK" ]; then
		msg -f "$FILE: failed"
	elif [ -z "$KEEP_GZIP" ]; then
		msg removing "$FILE"
		rm -f -- "$FILE"
	fi
done
