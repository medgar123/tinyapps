#!/bin/bash
##
## installkernel - Script for installing Linux kernel.
## $Id: installkernel,v 1.5 2005/07/24 00:14:48 mina86 Exp $
## Copyright (c) 2004,2005 by Michal Nazarewicz (mina86/AT/tlen.pl)
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##

##
## Version
##
if [ -z "$INSTALLKERNEL_INTERNAL_NOHEADER" ]; then
	echo 'Install Kernel  v0.6  (c) 2004,2005 by Micha³ Nazarewicz'
	echo '$Id: installkernel,v 1.5 2005/07/24 00:14:48 mina86 Exp $'
	echo
fi


##
## Help
##
usage () {
	cat<<END
usage: installkernel [<options> <switches>] [<version> [<image> [<systemmap>]]]
<options> are:
  -h --help             Displays this screen and exits
  -V --version          Displays vesion and exits
  -a --arch=<arch>      Sets the ARCH variable                        [auto]
     --cd=<dir>         Changes directory to <dir>
     --cd               Synonym of --cd=/usr/src/linux
     --su               Tries to became root (implies --user=<current-user>)
  -u --user=<user>      Everything not requiring SU privilages run as <user>
     --nice=<nice>      Adjust priority by <nice>                     [10]
     --no-nice          Synonym of  --nice=0

  If you use short option which requires an arumgnet (eg. '-a') the argument
  must be specified just after the option without whitespace or anything
  (eg. '-ai386')

<switches> are:
     --dry-run          Only display what would be done               [no]
     --color            Use colors                                    [auto]
     --make-dep         Run 'make dep'                                [auto]
  -i --compile-image    Runs 'make bzImage' to compile image          [no]
  -I --install-image    Copies kernel to /boot directory              [yes]
  -m --compile-modules  Runs 'make modules'                           [no]
  -M --install-modules  Runs 'make modules_install'                   [no]
     --install          Synonym of  --install-image --install-modules
     --compile          Synonym of  --compile-image --compile-modules
     --image            Synonym of  --compile-image --install-image
     --modules          Synonym of  --compile-modules --install-modules
  -s --symlinks         Updates symlinks in /boot directory           [yes]
  -l --lilo             Runs 'lilo' to update MBR entry               [yes]
     --all              Turns on all switches

  You can add 'n' to short forms or 'no-' to long forms of switches to
  disaable the feature. (eg -ns will disable updating of symlinks and
  --no-install will disable installing of modules and image).

  If nighter --make-dep nor --no-make-dep is sepcified 'make dep' will
  be run if --compile-image is on and the kernel version is 2.4.x.

<version>   kernel version (default: reads from include/linux/version.h)
<image>     path to kernel image (default: arch/\$ARCH/boot/bzImage)
<systemmap> path to System.map file (default: System.map)
END
#  -p --patch=<patch-file>  Applies a patch (decompresses if needed)
#  -P --force-patch=<patch-file>  like -p but ignores *.rej files
#  -r --reverse-patch=<patch-file>  Applies a reverse patch
#  -R --force-reverse-patch=<patch-file>  Like -r but ignores *.rej files
}



##
## Various things
##
ARG0="`basename "$0"`"
error () {
	ECODE="$1"
	shift
	printf "%s: %s\n" "$ARG0" "$*"
	exit $ECODE
}

header () {
	TITLE="$*"
	if [ $USE_ANSI == y ]; then
		printf "\e[32m=== \e[1m%s\e[0;32m " "$TITLE"
	else
		printf "=== %s " "$TITLE"
	fi
	LOOP=$(( ${COLUMNS-80} - ${#TITLE} - 29))
	while [ $LOOP -gt 0 ]; do
		echo -n '='
		LOOP=$(($LOOP -1))
	done
	date +" [%y/%m/%d %H:%M:%S] ==="
	[ $USE_ANSI == y ] && echo -en '\e[0m'
}

dry_run () {
	if [ $USE_ANSI == y ]; then
		echo -e '\e[33m  RUN     '"$@"'\e[0m'
	else
		echo -e '  RUN     '"$@"
	fi
}

dry_run_as () {
	dry_run "[as $RUNAS]" "$@"
}


##
## Function for patching the kernel
##
patch_kernel () {
	header Patch file: "$2"
	error 2 Patching not yet implemented

#		case "$PATCH" in
#			(*.bz2) bzip2 -cd "$PATCH" |patch -p1 || exit; ;;
#			(*.gz) gzip -cd "$PATCH" |patch -p1 || exhit; ;;
#			(*.Z) uncompress -c "$PATCH" |patch -p1 || exit; ;;
#			(*) patch -p1 <$PATCH || exit
#		esac
}


##
## Init default options
##
if [ -z "$INSTALLKERNEL_INTERNAL_NOPARSEARGS" ]; then
	VER=""
	IMG_PATH=""
	MAP_PATH=""

	SU="n"
	RUNAS=""
	NICE=10

	DRY_RUN="n"
	[ -t ] && USE_ANSI="y" || USE_ANSI="n"

	MAKE_DEP="auto"
	COMPILE_IMAGE="n"
	COMPILE_MODULES="n"
	INSTALL_IMAGE="y"
	INSTALL_MODULES="n"
	UPDATE_SYMLINKS="y"
	RUN_LILO="y"

	unset ARCH
	VARS_TO_EXPORT="VER IMG_PATH MAP_PATH SU RUNAS COMPILE_IMAGE DRY_RUN"
	VARS_TO_EXPORT="$VARS_TO_EXPORT COMPILE_MODULES INSTALL_IMAGE USE_ANSI"
	VARS_TO_EXPORT="$VARS_TO_EXPORT INSTALL_MODULES UPDATE_SYMLINKS RUN_LILO"
	VARS_TO_EXPORT="$VARS_TO_EXPORT MAKE_DEP NICE"


##
## Parse arguments
##
	while [ ! -z "$1" ]; do
		PARAM=""
		case "$1" in
		(--help|-h) usage; exit; ;;
		(--version|-V) exit; ;;

		(--arch=*) ARCH="${1:7}"; ;;
		(-a*) ARCH="${1:2}"; ;;

		(--cd=*) $RUN cd -- "${1:5}" || exit 1; ;;
		(--cd) $RUN cd /usr/src/linux || exit 1; ;;
#		(--*patch=*|-p|-P|-r|-R) patch_kernel "$1"; ;;

		(--su) SU="y"; ;;
		(--user=*) RUNAS="${1:7}"; ;;
		(--u*) RUNAS="${1:2}"; ;;
		(--nice=*) NICE="${1:7}"; ;;
		(--no-nice) NICE=0; ;;

		(-n*)    VALUE="n"; PARAM="-${1:2}"; ;;
		(--no-*) VALUE="n"; PARAM="--${1:5}"; ;;
		(--*)    VALUE="y"; PARAM="--${1:2}"; ;;
		(-*)     VALUE="y"; PARAM="-${1:1}"; ;;

		(*)
			if   [ -z "$VER"      ]; then VER="$1"
			elif [ -z "$IMG_PATH" ]; then IMG_PATH="$1"
			elif [ -z "$MAP_PATH" ]; then MAP_PATH="$1"
			else error 1 "unknown option: '$1'"
			fi
		;;
		esac


		if [ -z "$PARAM" ]; then
			shift
			continue;
		fi


		case "$PARAM" in
		(--dry-run) DRY_RUN=$VALUE; ;;
		(--color) USE_ANSI=$VALUE; ;;

		(--make-dep) MAKE_DEP=$VALUE; ;;
		(--compile) COMPILE_IMAGE=$VALUE;   COMPILE_MODULES=$VALUE;   ;;
		(--install) INSTALL_IMAGE=$VALUE;   INSTALL_MODULES=$VALUE;   ;;
		(--image)   COMPILE_IMAGE=$VALUE;   INSTALL_IMAGE=$VALUE;   ;;
		(--modules) COMPILE_MODULES=$VALUE; INSTALL_MODULES=$VALUE; ;;
		(-i|--compile-image)   COMPILE_IMAGE=$VALUE  ; ;;
		(-I|--install-image)   INSTALL_IMAGE=$VALUE  ; ;;
		(-m|--compile-modules) COMPILE_MODULES=$VALUE; ;;
		(-M|--install-modules) INSTALL_MODULES=$VALUE; ;;
		(-s|--symlinks)        UPDATE_SYMLINKS=$VALUE; ;;
		(-l|--lilo)            RUN_LILO=$VALUE       ; ;;

		(--all)
			COMPILE_IMAGE=$VALUE;   COMPILE_MODULES=$VALUE
			INSTALL_IMAGE=$VALUE;   INSTALL_MODULES=$VALUE
			UPDATE_SYMLINKS=$VALUE; RUN_LILO=$VALUE
			;;

		(*) error 1 "unknown option: '$1'"; ;;
		esac

		shift
	done
fi


##
## Set ARCH
##
if [ -z "$ARCH" ]; then
	ARCH=`uname -m | sed -e 's/i.86/i386/' -e 's/sun4u/sparc64/' \
	                     -e 's/arm.*/arm/' -e 's/sa110/arm/' \
	                     -e 's/s390x/s390/' -e 's/parisc64/parisc/'`
fi


##
## Become root ?
##
if [ $SU == y -a $EUID -ne 0 ]; then
	if [ "$NICE" -ne 0 ]; then
		header 'Becoming super user and setting nice'
	else
		header 'Becoming super user'
	fi

	INSTALLKERNEL_INTERNAL_NOHEADER=y
	INSTALLKERNEL_INTERNAL_NOPARSEARGS=y
	[ "$RUNAS" ] || RUNAS="$USER"
	SU=n
	NICETMP="$NICE";
	NICE=0

	if [ $DRY_RUN == y ]; then
		echo Here you would be asked for root password.
	else
		export $VARS_TO_EXPORT INSTALLKERNEL_INTERNAL_NOHEADER \
			INSTALLKERNEL_INTERNAL_NOPARSEARGS
		if [ "$NICETMP" -ne 0 ]; then
			nice -n "$NICETMP" su -c "$0"
		else
			su -c "$0"
		fi
		exit $?
	fi
fi


##
## Set Nice
##
if [ "$NICE" -ne 0 ]; then
	header 'Setting nice'
	INSTALLKERNEL_INTERNAL_NOHEADER=y
	INSTALLKERNEL_INTERNAL_NOPARSEARGS=y
	NICETMP="$NICE"; NICE=0
	export $VARS_TO_EXPORT INSTALLKERNEL_INTERNAL_NOHEADER \
		INSTALLKERNEL_INTERNAL_NOPARSEARGS
	nice -n "$NICETMP" "$0"
fi


##
## Prepare $RUN* variables
##
if [ $DRY_RUN == y ]; then
	RUN=dry_run
	if [ "$RUNAS" ]; then
		URUN=dry_run_as
	else
		URUN=dry_run
	fi
else
	RUN=eval
	if [ "$RUNAS" ]; then
		URUN="su $RUNAS -c "
	else
		URUN=eval
	fi
fi


##
## Make dep?
##
if [ $MAKE_DEP == auto -a $COMPILE_IMAGE == y ]; then
	if [ -z "$VER"      ]; then
		$RUN make include/linux/version.h
		[ -f include/linux/version.h ] || \
			error 3 include/linux/version.h: missing
		VER=`sed -ne '/UTS_RELEASE/ s/^[^\"]*"\(.*\)"$/\1/ p' \
		         <include/linux/version.h || exit $?`
	fi
	if [ "${VER:0:4}" == 2.4. ]; then
		MAKE_DEP=y
	else
		MAKE_DEP=n
	fi
fi

if [ $MAKE_DEP == y ]; then
	header Makind dep
	$URUN 'make dep' || exit $?
fi


##
## Compile image & modules and installing modules
##
if [ $COMPILE_IMAGE == y ]; then
	header Compiling bzImage
	$URUN 'make bzImage' || exit $?
fi

if [ $COMPILE_MODULES == y ]; then
	header Compiling modules
	$URUN 'make modules' || exit $?
fi

if [ $INSTALL_MODULES == y ]; then
	header Installing modules
	$RUN 'make modules_install' || exit $?
fi



##
## Copying image
##
if [ $INSTALL_IMAGE = y ]; then
	header Installing kernel
	if [ -z "$VER"      ]; then
		$RUN make include/linux/version.h
		[ -f include/linux/version.h ] || \
			error 3 include/linux/version.h: missing
		VER=`sed -ne '/UTS_RELEASE/ s/^[^\"]*"\(.*\)"$/\1/ p' \
		         <include/linux/version.h || exit $?`
	fi
	if [ -z "$IMG_PATH" ]; then IMG_PATH="arch/$ARCH/boot/bzImage"; fi
	if [ -z "$MAP_PATH" ]; then MAP_PATH="System.map"; fi

	echo '  CP      bzImage'
	$RUN cp -- "$IMG_PATH" "/boot/bzImage-$VER"    || exit $?
	echo '  CP      System.map'
	$RUN cp -- "$MAP_PATH" "/boot/System.map-$VER" || exit $?
	echo '  CP      .config'
	$RUN cp -- .config "/boot/config-$VER"         || exit $?
fi



##
## Updating symlinks
##
if [ $UPDATE_SYMLINKS == y ]; then
	header Updating symlinks
	$RUN cd /boot || exit 1
	for FILE in bzImage System.map config; do
		echo "  LNK     $FILE"
		$RUN mv -f $FILE $FILE~
		$RUN ln -fs $FILE-$VER $FILE
	done
	$RUN cd -
fi



##
## Running LILO
##
if [ $RUN_LILO == y ]; then
	header Running LILO
	$RUN lilo
fi
