#!/bin/bash
##
## installkernel - Script for installing Linux kernel.
## $Id: installkernel,v 1.11 2005/07/25 00:39:28 mina86 Exp $
## Copyright (c) 2004,2005 by Michal Nazarewicz (mina86/AT/tlen.pl)
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##

##
## Version
##
if [ ! $INSIDE_INSTALLKERNEL ]; then
	echo 'Install Kernel  v0.9  (c) 2004,2005 by Micha³ Nazarewicz'
	echo '$Id: installkernel,v 1.11 2005/07/25 00:39:28 mina86 Exp $'
	echo
	if [ -f /tmp/installkernel-lockfile ]; then
		echo "${0##*/}: lockfile exists"
		declare -i $PID
		PID=`cat /tmp/installkernel-lockfile`
		if [ $PID -ne 0 ] && ps -p $PID >/dev/null 2>&1; then
			echo "${0##*/}: make sure only one instance of installkernel is running"
			echo "${0##*/}: or remove /tmp/installkernel-lockfile if that is the case"
			exit 4
		fi

		echo "${0##*/}: looks like invalid termination; removing lockfile"
		echo -n $$ >/tmp/installkernel-lockfile
	fi
fi


##
## Help
##
usage () {
	cat<<END
usage: installkernel [<options> <switches>] [<version> [<image> [<systemmap>]]]
<options> are:
  -h --help             Displays this screen and exits
  -V --version          Displays vesion and exits
  -a --arch=<arch>      Sets the ARCH variable                        [auto]
     --su               Tries to became root (implies --user=<current-user>)
  -u --user=<user>      Everything not requiring SU privilages run as <user>
     --nice=<nice>      Adjust priority by <nice>                     [auto]
     --no-nice          Synonym of  --nice=0

     --cd=<dir>         Changes directory to <dir>
     --cd               Synonym of --cd=/usr/src/linux
     --patch=<patch>    Applies <patch> in the current directory


  If you use short option which requires an arumgnet (eg. '-a') the argument
  must be specified just after the option without whitespace or anything
  (eg. '-ai386')

  If --nice is auto then the script will use adjustment that will make the
  absolute value of nice equal to 10 unless at the moment of running the
  absolute value of nice is greater then 10 in which case no nice
  adjustment will be used.

  --cd and --patch options are executed in the given order.  <patch> is of
  format: [ "!" ] [ "-r" ] [ <level> ":" ] [ ( "=" | "--" ) ] <path> where
  ! means to apply patch even if there are some errors; -r means to treat
  patch a reverse patch; <level> is a number passed to -p patch's argument
  and <path> is path to the patch file.  Eg.:  --patch=!-r=reverse.diff

<switches> are:
     --dry-run          Only display what would be done               [no]
     --color            Use colors                                    [auto]

  -c --clean            Runs 'make clean' before compilation          [no]
  -d --make-dep         Runs 'make dep'                               [auto]

  -A --all              Synonym of all of the below

  -i --compile-image    Runs 'make bzImage' to compile image          [no]
  -I --install-image    Copies kernel to /boot directory              [yes]
     --tidy-image       Removes old images                            [no]
     --image            Synonym of the three above

  -m --compile-modules  Runs 'make modules'                           [no]
  -M --install-modules  Runs 'make modules_install'                   [no]
     --tidy-modules     Removes old modules                           [no]
     --modules          Synonym of the three above

     --install          Synonym of  --install-image --install-modules
     --compile          Synonym of  --compile-image --compile-modules
     --tidy             Synonym of  --tidy-image --tidy-modules

  -s --symlinks         Updates symlinks in /boot directory           [yes]
  -l --lilo             Runs 'lilo' to update MBR entry               [yes]

  You can add 'n' to short forms or 'no-' to long forms of switches to
  disaable the feature. (eg -ns will disable updating of symlinks and
  --no-install will disable installing of modules and image).

  If nighter --make-dep nor --no-make-dep is sepcified 'make dep' will be
  run if --compile-image is on and the kernel version is 2.4.x.

<version>   kernel version (default: reads from include/linux/version.h)
<image>     path to kernel image (default: arch/\$ARCH/boot/bzImage)
<systemmap> path to System.map file (default: System.map)
END
}



##
## Prints error and exit
##
ARG0="${0##*/}"
error () {
	local ECODE="$1"
	shift
	printf "%s: %s\n" "$ARG0" "$*"
	exit $ECODE
}


##
## Prints header
##
header () {
	local TITLE="$*"
	if [ $USE_ANSI == y ]; then
		printf "\e[32m=== \e[1m%s\e[0;32m " "$TITLE"
	else
		printf "=== %s " "$TITLE"
	fi
	local LOOP=$(( ${COLUMNS-80} - ${#TITLE} - 29))
	while [ $LOOP -gt 0 ]; do
		echo -n '='
		LOOP=$(($LOOP -1))
	done
	date +" [%y/%m/%d %H:%M:%S] ==="
	[ $USE_ANSI == y ] && echo -en '\e[0m'
}


##
## Runs command
##
run () {
	local AS=
	local SILENT=
	local DUMMY=
	local FORCE=
	local INPUT=/dev/stdin
	local OUTPUT=/dev/stdout

	# Arguments
	[ "$1" == "-u" ] && AS=yes      && shift
	[ "$1" == "-s" ] && SILENT=yes  && shift
	[ "$1" == "-f" ] && FORCE=yes   && shift
	[ "$1" == "-d" ] && DUMMY=yes   && shift
	[ "$1" == "-i" ] && INPUT="$2"  && shift 2
	[ "$1" == "-o" ] && OUTPUT="$2" && shift 2
	[ "$AS" -a ! "$RUNAS" ] && AS=

	# Dry run
	if [ "$DRY_RUN" -a ! "$SILENT" ]; then
		[ $USE_ANSI ] && echo -ne '\e[33m  RUN    ' || echo -n '  RUN    '
		[ $AS ] && echo -n " [as $RUNAS]"
		printf " '%s'" "$@"
		[ "$INPUT"  != /dev/stdin  ] && echo -n " <$INPUT"
		[ "$OUTPUT" != /dev/stdout ] && echo -n " >$OUTPUT"
		[ $USE_ANSI ] && echo -e '\e[0m' || echo
		[ $FORCE ] || return 0
	fi
	[ "$DRY_RUN" -a ! "$FORCE" ] && return 0

	# Don't run really
	[ $DUMMY ] && return 0
	local EC=0

	# cd cannot be run throught su or nice
	if [ "$1" == cd ]; then
		"$@" || EC=$?
		return $?
	fi

	# Run not as
	if [ ! $AS ]; then
		if [ "$NICE" != "auto" ] && [ "$NICE" -ne 0 ]
		then nice -n "$NICE" "$@" <"$INPUT" >"$OUTPUT" || EC=$?
		else                 "$@" <"$INPUT" >"$OUTPUT" || EC=$?
		fi
		return $EC
	fi

	# Run as
	local ARGS=
	while [ $# -ne 0 ]; do
		ARGS="$ARGS '`echo "$1" | sed -e "s/'/'\\\\''/"`'"
		shift
	done
	if [ $NICE -ne 0 ]
	then nice -n "$NICE" su "$RUNAS" -c "$ARGS" <"$INPUT" >"$OUTPUT" || EC=$?
	else                 su "$RUNAS" -c "$ARGS" <"$INPUT" >"$OUTPUT" || EC=$?
	fi
	return $EC
}


##
## Backups specified file(s)
##
backup () {
	local ARG=
	[ "$1" == -u ] && ARG="-u" && shift
	while [ "$1" ]; do
		if [ -f "$1" ]; then
			[ -f "$1~" ] && backup $ARG "$1~"
			run $ARG mv -f -- "$1" "$1~"
		fi
		shift
	done
}


##
## Signals etc
##
interrupted () {
	if [ $USE_ANSI == y ]
	then echo -e '\e[31;1m  SIG    Got SIG$1; terminating...\e[0m'
	else echo '  SIG    Got SIG$1; terminating...'
	fi

	[ -f /tmp/installkernel-$$ ]       && run rm -f /tmp/installkernel-$$
	[ -f /tmp/installkernel-lockfile ] && run rm -f /tmp/installkernel-lockfile

	exit 3
}

set -e
for E in ERR INT KILL TERM STOP HUP; do
	trap "interrupted $E" $E
done


##
## Init default options
##
if [ ! $INSIDE_INSTALLKERNEL ]; then
	VER=
	IMG_PATH=
	MAP_PATH=

	SU=
	RUNAS=
	NICE=auto

	DRY_RUN=
	[ -t ] && USE_ANSI=y || USE_ANSI=

	MAKE_DEP=auto
	CLEAN=
	COMPILE_IMAGE=
	COMPILE_MODULES=
	INSTALL_IMAGE=y
	INSTALL_MODULES=
	UPDATE_SYMLINKS=y
	RUN_LILO=y
	TIDY_IMAGE=
	TIDY_MODULES=

	declare -a ACTIONS
	ACTION_COUNT=0

	unset ARCH
	INSIDE_INSTALLKERNEL=y
	VARS_TO_EXPORT="VER IMG_PATH MAP_PATH SU RUNAS COMPILE_IMAGE DRY_RUN NICE"
	VARS_TO_EXPORT="$VARS_TO_EXPORT COMPILE_MODULES INSTALL_IMAGE USE_ANSI"
	VARS_TO_EXPORT="$VARS_TO_EXPORT INSTALL_MODULES UPDATE_SYMLINKS RUN_LILO"
	VARS_TO_EXPORT="$VARS_TO_EXPORT MAKE_DEP CLEAN TIDY_IMAGE TIDY_MODULES"
	VARS_TO_EXPORT="$VARS_TO_EXPORT INSIDE_INSTALLKERNEL"


##
## Parse arguments
##
	while [ "$1" ]; do
		PARAM=
		case "$1" in
		(--help|-h) usage; exit 0; ;;
		(--version|-V) exit 0; ;;

		(--arch=*) ARCH="${1:7}"; ;;
		(-a*) ARCH="${1:2}"; ;;

		(--cd=*)
			ACTIONS[$ACTION_COUNT]=cd;
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			ACTIONS[$ACTION_COUNT]="${1:5}";
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			;;
		(--cd)
			ACTIONS[$ACTION_COUNT]=cd;
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			ACTIONS[$ACTION_COUNT]=/usr/src/linux;
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			;;


		(--patch=*)
			ACTIONS[$ACTION_COUNT]=patch;
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			ACTIONS[$ACTION_COUNT]="${1:8}";
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			;;

		(--su) SU=y; ;;
		(--user=*) RUNAS="${1:7}"; ;;
		(--u*) RUNAS="${1:2}"; ;;
		(--nice=*) NICE="${1:7}"; ;;
		(--no-nice) NICE=0; ;;

		(-n*)    VALUE= : PARAM="-${1:2}"; ;;
		(--no-*) VALUE= ; PARAM="--${1:5}"; ;;
		(--*)    VALUE=y; PARAM="--${1:2}"; ;;
		(-*)     VALUE=y; PARAM="-${1:1}"; ;;

		(*)
			if   [ -z "$VER"      ]; then VER="$1"
			elif [ -z "$IMG_PATH" ]; then IMG_PATH="$1"
			elif [ -z "$MAP_PATH" ]; then MAP_PATH="$1"
			else error 1 unknown option: "$1"
			fi
		;;
		esac

		if [ ! "$PARAM" ]; then
			shift
			continue;
		fi

		case "$PARAM" in
		(--dry-run) DRY_RUN=$VALUE ; ;;
		(--color)   USE_ANSI=$VALUE; ;;

		(-c|--clean)           CLEAN=$VALUE          ; ;;
		(-d|--make-dep)        MAKE_DEP=$VALUE       ; ;;

		(-i|--compile-image)   COMPILE_IMAGE=$VALUE  ; ;;
		(-I|--install-image)   INSTALL_IMAGE=$VALUE  ; ;;
		(--tidy-image)         TIDY_IMAGE=$VALUE     ; ;;
		(--image)              COMPILE_IMAGE=$VALUE  ;
                               INSTALL_IMAGE=$VALUE  ; TIDY_IMAGE=$VALUE;;

		(-m|--compile-modules) COMPILE_MODULES=$VALUE; ;;
		(-M|--install-modules) INSTALL_MODULES=$VALUE; ;;
		(-t|--tidy-modules)    TIDY_MODULES=$VALUE   ; ;;
		(--modules)            COMPILE_MODULES=$VALUE;
                               INSTALL_MODULES=$VALUE; TIDY_MODULES=$VALUE;;

		(--compile) COMPILE_IMAGE=$VALUE; COMPILE_MODULES=$VALUE; ;;
		(--install) INSTALL_IMAGE=$VALUE; INSTALL_MODULES=$VALUE; ;;
		(--tidy)    TIDY_IMAGE=$VALUE   ; TIDY_MODULES=$VALUE   ; ;;

		(-s|--symlinks)        UPDATE_SYMLINKS=$VALUE; ;;
		(-l|--lilo)            RUN_LILO=$VALUE       ; ;;

		(-A|--all)
			COMPILE_IMAGE=$VALUE  ; COMPILE_MODULES=$VALUE
			INSTALL_IMAGE=$VALUE  ; INSTALL_MODULES=$VALUE
			TIDY_IMAGE=$VALUE     ; TIDY_MODULES=$VALUE
			UPDATE_SYMLINKS=$VALUE; RUN_LILO=$VALUE
			;;

		(*) error 1 unknown option: "$1"; ;;
		esac

		shift
	done
fi


header Starting
set -- "${ACTIONS[@]}"
unset ACTIONS ACTION_COUNT


##
## Calculate nice
##
if [ "$NICE" == auto ]; then
	NICE=$((10 - `nice`))
	[ $NICE -lt 0 ] && NICE=0
fi


##
## Set ARCH
##
if [ -z "$ARCH" ]; then
	ARCH=`uname -m | sed -e 's/i.86/i386/' -e 's/sun4u/sparc64/' \
	                     -e 's/arm.*/arm/' -e 's/sa110/arm/' \
	                     -e 's/s390x/s390/' -e 's/parisc64/parisc/'`
	echo "  ARCH    $ARCH"
fi


##
## Become root ?
##
if [ "$SU" -a $EUID -ne 0 ]; then
	if [ "$NICE" -ne 0 ]; then
		echo "  SU      Becoming super user and setting nice"
	else
		echo "  SU      Becoming super user"
	fi

	[ "$RUNAS" ] || RUNAS="$USER"
	SU=
	NICETMP="$NICE";
	NICE=0

	if [ $DRY_RUN ]; then
		echo Here you would be asked for root password.
	else
		export $VARS_TO_EXPORT

		ARGS="'`echo "$0" | sed -e "s/'/'\\\\''/"`'"
		while [ $# -ne 0 ]; do
			ARGS="$ARGS '`echo "$1" | sed -e "s/'/'\\\\''/"`'"
			shift
		done
		if [ "$NICETMP" -ne 0 ]; then
			nice -n "$NICETMP" su -c "$0"
		else
			su -c "$0"
		fi
		exit $?
	fi
fi


##
## Patching and changing directories
##
while [ "$1" ]; do
	if [ "$1" == cd ]; then
		echo "  CD      $2"
		run -f cd -- "$2"
		shift 2
		continue;
	fi

	if [ "$1" != patch ]; then error 3 Internal error; fi

	PATCH="$2"
	FORCE=;   [ "${PATCH:0:1}" == !  ] && FORCE=y   && PATCH="${PATCH:1}"
	REVERSE=; [ "${PATCH:0:2}" == -R ] && REVERSE=R && PATCH="${PATCH:2}"

	run -d expr "$PATCH" : '[0-9][0-9]*:'
	CUT=`expr "$PATCH" : '[0-9][0-9]*:' || true`
	if [ $CUT -ne 0 ]; then
		LEVEL="${PATCH:0:$CUT}"; LEVEL="${LEVEL%:}"
		PATCH="${PATCH:$CUT}"
	else
		LEVEL=1
	fi

	if [ "${PATCH:0:1}" == = ]
	then PATCH="${PATCH:1}"
	elif [ "${PATCH:0:2}" == - ]
	then PATCH="${PATCH:2}"
	fi

	[ -f "$PATCH" ] || error 2 "$PATCH: no such file"
	[ -r "$PATCH" ] || error 2 "$PATCH: unreadable"

	echo "  DECOMP  $PATCH"
	[ -h /tmp/installkernel-$$ ] && run rm -f /tmp/installkernel-$$
	case "$PATCH" in
	(*.bz2) run -u -i "$PATCH" -o /tmp/installkernel-$$  bzip2 -d   ; ;;
	(*.gz)  run -u -i "$PATCH" -o /tmp/installkernel-$$  gzip  -d   ; ;;
	(*.Z)   run -u -i "$PATCH" -o /tmp/installkernel-$$  compress -d; ;;
	(*)     run -u ln -s "$PATCH" /tmp/installkernel-$$; ;;
	esac

	if [ ! "$FORCE" ]; then
		echo "  TEST    $PATCH"
		run -i /tmp/installkernel-$$ patch -sf{$REVERSE}p$LEVEL --dry-run
	fi

	run -i /tmp/installkernel-$$ patch -sf{$REVERSE}p$LEVEL
	run rm -f /tmp/installkernel-$$
	shift 2
done


##
## Clean
##
[ $CLEAN ] && header 'Cleaning previous compilation' run -u make clean


##
## Make dep?
##
if [ "$COMPILE_IMAGE" -a "$MAKE_DEP" == auto ]; then
	if [ ! "$VER" ]; then
		run -u -f make include/linux/version.h
		[ -f include/linux/version.h ] || \
			error 3 include/linux/version.h: missing
		VER=`sed -ne '/UTS_RELEASE/ s/^[^\"]*"\(.*\)"$/\1/ p' \
		         <include/linux/version.h`
		echo "  VER     $VER"
	fi
	[ "${VER:0:4}" == 2.4. ] && MAKE_DEP=y || MAKE_DEP=
fi


##
## make *
##
[ $MAKE_DEP        ] && header 'Updating dependencies' && run -u make dep
[ $COMPILE_IMAGE   ] && header 'Compiling bzImage'     && run -u make bzImage
[ $COMPILE_MODULES ] && header 'Compiling modules'     && run -u make modules
[ $INSTALL_MODULES ] && header 'Installing modules'    && run    make modules_install


##
## Removing old images
##
if [ $TIDY_IMAGE ]; then
	header Removing old image
	for FILE in bzImage System.map config; do
		echo "  READLNK $FILE~"
		run -d readlink "/boot/$FILE~"
		LNK=`readlink "/boot/$FILE~" || true`
		if [ -f "/boot/$LNK" ]; then
			echo "  RM      $LNK"
			run rm -f -- "/boot/$LNK"
		fi
	done
fi


##
## Removing old modules
##
if [ $TIDY_MODULES ]; then
	header Removing old modules
	echo "  READLNK bzImage"
	run -d readlink "/boot/$FILE"
	TMP=`readlink "/boot/$FILE" || true`
	TMP="${TMP:8}"; OVER=
	while [ "$TMP" != "$OVER" ]; do OVER="$TMP"; TMP=${OVER%~}; done

	echo "  READLNK bzImage~"
	run -d readlink "/boot/$FILE~"
	TMP=`readlink "/boot/$FILE~" || true`
	TMP="${TMP:8}"; OOVER=
	while [ "$TMP" != "$OOVER" ]; do OOVER="$TMP"; TMP=${OOVER%~}; done

	if [ "$OOVER" -a "$OOVER" != "$VER" -a "$OOVER" != "$OVER" -a \
		-d "/lib/modules/$OOVER" ]; then
		echo "  RMDIR   /lib/modules/$OOVER"
		run rm -rfv -- "/lib/modules/$OOVER"
	fi
fi


##
## Copying image
##
if [ $INSTALL_IMAGE ]; then
	header Installing kernel
	if [ ! "$VER" ]; then
		run -u -f make include/linux/version.h
		[ -f include/linux/version.h ] || \
			error 3 include/linux/version.h: missing
		VER=`sed -ne '/UTS_RELEASE/ s/^[^\"]*"\(.*\)"$/\1/ p' \
		         <include/linux/version.h`
		echo "  VER     $VER"
	fi
	if [ ! "$IMG_PATH" ]; then IMG_PATH="arch/$ARCH/boot/bzImage"; fi
	if [ ! "$MAP_PATH" ]; then MAP_PATH="System.map"; fi

	echo '  CP      bzImage'
	backup "/boot/bzImage-$VER"
	run cp -- "$IMG_PATH" "/boot/bzImage-$VER"

	echo '  CP      System.map'
	backup "/boot/System.map-$VER"
	run cp -- "$MAP_PATH" "/boot/System.map-$VER"

	echo '  CP      .config'
	backup "/boot/config-$VER"
	run cp -- .config "/boot/config-$VER"
fi



##
## Updating symlinks
##
if [ $UPDATE_SYMLINKS ]; then
	header Updating symlinks
	for FILE in bzImage System.map config; do
		echo "  READLNK $FILE"
		run -d "readlink /boot/$FILE" || true
		LNK=`readlink "/boot/$FILE" || true`
		if [ "$LNK" == "$FILE-$VER" ]; then
			echo "  LNK     $FILE~"
			run rm -f -- /boot/$FILE~
			run ln -s -- $FILE-$VER~ /boot/$FILE~
		else
			echo "  LNK     $FILE"
			run mv -f -- /boot/$FILE /boot/$FILE~ || true
			run ln -fs -- $FILE-$VER /boot/$FILE
		fi
	done
fi



##
## Running LILO
##
if [ $RUN_LILO == y ]; then
	header Running LILO
	run lilo
fi
