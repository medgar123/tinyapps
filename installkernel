#!/bin/bash
##
## installkernel - Script for installing Linux kernel.
## $Id: installkernel,v 1.7 2005/07/24 15:33:14 mina86 Exp $
## Copyright (c) 2004,2005 by Michal Nazarewicz (mina86/AT/tlen.pl)
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##

##
## Version
##
if [ ! $INSIDE_INSTALLKERNEL ]; then
	echo 'Install Kernel  v0.8  (c) 2004,2005 by Micha³ Nazarewicz'
	echo '$Id: installkernel,v 1.7 2005/07/24 15:33:14 mina86 Exp $'
	echo
fi


##
## Help
##
usage () {
	cat<<END
usage: installkernel [<options> <switches>] [<version> [<image> [<systemmap>]]]
<options> are:
  -h --help             Displays this screen and exits
  -V --version          Displays vesion and exits
  -a --arch=<arch>      Sets the ARCH variable                        [auto]
     --cd=<dir>         Changes directory to <dir>
     --cd               Synonym of --cd=/usr/src/linux
     --su               Tries to became root (implies --user=<current-user>)
  -u --user=<user>      Everything not requiring SU privilages run as <user>
     --nice=<nice>      Adjust priority by <nice>                     [auto]
     --no-nice          Synonym of  --nice=0

  If you use short option which requires an arumgnet (eg. '-a') the argument
  must be specified just after the option without whitespace or anything
  (eg. '-ai386')

  If --nice is auto then the script will use adjustment that will make the
  absolute value of nice equal to 10 unless at the moment of running the
  absolute value of nice is greater then 10 in which case no nice
  adjustment will be used.

<switches> are:
     --dry-run          Only display what would be done               [no]
     --color            Use colors                                    [auto]

  -c --clean            Runs 'make clean' before compilation          [no]
  -d --make-dep         Runs 'make dep'                               [auto]

  -A --all              Synonym of all of the below

  -i --compile-image    Runs 'make bzImage' to compile image          [no]
  -I --install-image    Copies kernel to /boot directory              [yes]
     --tidy-image       Removes old images                            [no]
     --image            Synonym of the three above

  -m --compile-modules  Runs 'make modules'                           [no]
  -M --install-modules  Runs 'make modules_install'                   [no]
     --tidy-modules     Removes old modules                           [no]
     --modules          Synonym of the three above

     --install          Synonym of  --install-image --install-modules
     --compile          Synonym of  --compile-image --compile-modules
     --tidy             Synonym of  --tidy-image --tidy-modules

  -s --symlinks         Updates symlinks in /boot directory           [yes]
  -l --lilo             Runs 'lilo' to update MBR entry               [yes]

  You can add 'n' to short forms or 'no-' to long forms of switches to
  disaable the feature. (eg -ns will disable updating of symlinks and
  --no-install will disable installing of modules and image).

  If nighter --make-dep nor --no-make-dep is sepcified 'make dep' will be
  run if --compile-image is on and the kernel version is 2.4.x.

<version>   kernel version (default: reads from include/linux/version.h)
<image>     path to kernel image (default: arch/\$ARCH/boot/bzImage)
<systemmap> path to System.map file (default: System.map)
END
#  -p --patch=<patch-file>  Applies a patch (decompresses if needed)
#  -P --force-patch=<patch-file>  like -p but ignores *.rej files
#  -r --reverse-patch=<patch-file>  Applies a reverse patch
#  -R --force-reverse-patch=<patch-file>  Like -r but ignores *.rej files
}



##
## Print error and exit
##
ARG0="`basename "$0"`"
error () {
	local ECODE="$1"
	shift
	printf "%s: %s\n" "$ARG0" "$*"
	exit $ECODE
}


##
## Print header
##
header () {
	local TITLE="$*"
	if [ $USE_ANSI == y ]; then
		printf "\e[32m=== \e[1m%s\e[0;32m " "$TITLE"
	else
		printf "=== %s " "$TITLE"
	fi
	local LOOP=$(( ${COLUMNS-80} - ${#TITLE} - 29))
	while [ $LOOP -gt 0 ]; do
		echo -n '='
		LOOP=$(($LOOP -1))
	done
	date +" [%y/%m/%d %H:%M:%S] ==="
	[ $USE_ANSI == y ] && echo -en '\e[0m'
}


##
## Run command
##
run () {
	local AS=
	local DUMMY=
	local FORCE=

	# Arguments
	if [ "$1" == "-c" ]; then if [ ! "$2" ]; then return 0; fi; shift 2; fi
	[ "$1" == "-h" ] && header "$2" && shift 2
	[ "$1" == "-u" ] && AS=yes      && shift
	[ "$1" == "-f" ] && FORCE=yes   && shift
	[ "$1" == "-d" ] && DUMMY=yes   && shift
	[ "$AS" -a ! "$RUNAS" ] && AS=

	# Dry run
	if [ $DRY_RUN ]; then
		if [ $USE_ANSI ]; then
			echo -ne '\e[33m  RUN    '
			[ $AS ] && echo -n " [as $RUNAS]"
			printf " '%s'" "$@"
			echo -e '\e[0m'
		else
			echo -n '  RUN    '
			[ $AS ] && echo -n " [as $RUNAS]"
			printf " '%s'" "$@"
			echo
		fi
		[ $FORCE ] || return 0
	fi

	# Don't run really
	[ $DUMMY ] && return 0
	local EC=0

	# Run not as
	if [ ! $AS ]; then
		if [ "$NICE" != "auto" ] && [ "$NICE" -ne 0 ]; then
			nice -n "$NICE" "$@" || EC=$?
		else
			"$@" || EC=$?
		fi
		return $EC
	fi

	# Run as
	local ARGS=
	while [ $# -ne 0 ]; do
		ARGS="$ARGS '`echo "$1" | sed -e "s/'/'\\\\''/"`'"
		shift
	done
	if [ $NICE -ne 0 ]; then
		nice -n "$NICE" su "$RUNAS" -c "$ARGS" || EC=$?
	else
		su "$RUNAS" -c "$ARGS" || EC=$?
	fi
	return $EC
}


##
## Backup specified file(s)
##
backup () {
	local ARG=
	[ "$1" == -u ] && ARG="-u" && shift
	while [ "$1" ]; do
		if [ -f "$1" ]; then
			[ -f "$1~" ] && backup $ARG "$1~"
			run $ARG mv -f -- "$1" "$1~"
		fi
		shift
	done
}


##
## Function for patching the kernel
##
patch_kernel () {
	header Patch file: "$2"
	error 2 Patching not yet implemented

#		case "$PATCH" in
#			(*.bz2) bzip2 -cd "$PATCH" |patch -p1 || exit; ;;
#			(*.gz) gzip -cd "$PATCH" |patch -p1 || exhit; ;;
#			(*.Z) uncompress -c "$PATCH" |patch -p1 || exit; ;;
#			(*) patch -p1 <$PATCH || exit
#		esac
}


##
## Init default options
##
set -e

if [ ! $INSIDE_INSTALLKERNEL ]; then
	VER=
	IMG_PATH=
	MAP_PATH=

	SU=
	RUNAS=
	NICE=auto

	DRY_RUN=
	[ -t ] && USE_ANSI=y || USE_ANSI=

	MAKE_DEP=auto
	CLEAN=
	COMPILE_IMAGE=
	COMPILE_MODULES=
	INSTALL_IMAGE=y
	INSTALL_MODULES=
	UPDATE_SYMLINKS=y
	RUN_LILO=y
	TIDY_IMAGE=
	TIDY_MODULES=

	ACTIONS=( )

	unset ARCH
	INSIDE_INSTALLKERNEL=y
	VARS_TO_EXPORT="VER IMG_PATH MAP_PATH SU RUNAS COMPILE_IMAGE DRY_RUN NICE"
	VARS_TO_EXPORT="$VARS_TO_EXPORT COMPILE_MODULES INSTALL_IMAGE USE_ANSI"
	VARS_TO_EXPORT="$VARS_TO_EXPORT INSTALL_MODULES UPDATE_SYMLINKS RUN_LILO"
	VARS_TO_EXPORT="$VARS_TO_EXPORT MAKE_DEP CLEAN TIDY_IMAGE TIDY_MODULES"
	VARS_TO_EXPORT="$VARS_TO_EXPORT INSIDE_INSTALLKERNEL ACTIONS"


##
## Parse arguments
##
	while [ ! -z "$1" ]; do
		PARAM=
		case "$1" in
		(--help|-h) usage; exit 0; ;;
		(--version|-V) exit 0; ;;

		(--arch=*) ARCH="${1:7}"; ;;
		(-a*) ARCH="${1:2}"; ;;

		(--cd=*) run -f cd -- "${1:5}"; ;;
		(--cd) run -f cd /usr/src/linux; ;;
#		(--*patch=*|-p|-P|-r|-R) patch_kernel "$1"; ;;

		(--su) SU=y; ;;
		(--user=*) RUNAS="${1:7}"; ;;
		(--u*) RUNAS="${1:2}"; ;;
		(--nice=*) NICE="${1:7}"; ;;
		(--no-nice) NICE=0; ;;

		(-n*)    VALUE= : PARAM="-${1:2}"; ;;
		(--no-*) VALUE= ; PARAM="--${1:5}"; ;;
		(--*)    VALUE=y; PARAM="--${1:2}"; ;;
		(-*)     VALUE=y; PARAM="-${1:1}"; ;;

		(*)
			if   [ -z "$VER"      ]; then VER="$1"
			elif [ -z "$IMG_PATH" ]; then IMG_PATH="$1"
			elif [ -z "$MAP_PATH" ]; then MAP_PATH="$1"
			else error 1 unknown option: "$1"
			fi
		;;
		esac

		if [ ! "$PARAM" ]; then
			shift
			continue;
		fi

		case "$PARAM" in
		(--dry-run) DRY_RUN=$VALUE ; ;;
		(--color)   USE_ANSI=$VALUE; ;;

		(-c|--clean)           CLEAN=$VALUE          ; ;;
		(-d|--make-dep)        MAKE_DEP=$VALUE       ; ;;

		(-i|--compile-image)   COMPILE_IMAGE=$VALUE  ; ;;
		(-I|--install-image)   INSTALL_IMAGE=$VALUE  ; ;;
		(--tidy-image)         TIDY_IMAGE=$VALUE     ; ;;
		(--image)              COMPILE_IMAGE=$VALUE  ;
                               INSTALL_IMAGE=$VALUE  ; TIDY_IMAGE=$VALUE;;

		(-m|--compile-modules) COMPILE_MODULES=$VALUE; ;;
		(-M|--install-modules) INSTALL_MODULES=$VALUE; ;;
		(-t|--tidy-modules)    TIDY_MODULES=$VALUE   ; ;;
		(--modules)            COMPILE_MODULES=$VALUE;
                               INSTALL_MODULES=$VALUE; TIDY_MODULES=$VALUE;;

		(--compile) COMPILE_IMAGE=$VALUE; COMPILE_MODULES=$VALUE; ;;
		(--install) INSTALL_IMAGE=$VALUE; INSTALL_MODULES=$VALUE; ;;
		(--tidy)    TIDY_IMAGE=$VALUE   ; TIDY_MODULES=$VALUE   ; ;;

		(-s|--symlinks)        UPDATE_SYMLINKS=$VALUE; ;;
		(-l|--lilo)            RUN_LILO=$VALUE       ; ;;

		(-A|--all)
			COMPILE_IMAGE=$VALUE  ; COMPILE_MODULES=$VALUE
			INSTALL_IMAGE=$VALUE  ; INSTALL_MODULES=$VALUE
			TIDY_IMAGE=$VALUE     ; TIDY_MODULES=$VALUE
			UPDATE_SYMLINKS=$VALUE; RUN_LILO=$VALUE
			;;

		(*) error 1 unknown option: "$1"; ;;
		esac

		shift
	done
fi


header Starting


##
## Calculate nice
##
if [ "$NICE" == auto ]; then
	NICE=$((10 - `nice`))
	[ $NICE -lt 0 ] && NICE=0
fi


##
## Set ARCH
##
if [ -z "$ARCH" ]; then
	ARCH=`uname -m | sed -e 's/i.86/i386/' -e 's/sun4u/sparc64/' \
	                     -e 's/arm.*/arm/' -e 's/sa110/arm/' \
	                     -e 's/s390x/s390/' -e 's/parisc64/parisc/'`
fi


##
## Become root ?
##
if [ "$SU" -a $EUID -ne 0 ]; then
	if [ "$NICE" -ne 0 ]; then
		header Becoming super user and setting nice
	else
		header Becoming super user
	fi

	[ "$RUNAS" ] || RUNAS="$USER"
	SU=
	NICETMP="$NICE";
	NICE=0

	if [ $DRY_RUN ]; then
		echo Here you would be asked for root password.
	else
		export $VARS_TO_EXPORT
		if [ "$NICETMP" -ne 0 ]; then
			nice -n "$NICETMP" su -c "$0"
		else
			su -c "$0"
		fi
		exit $?
	fi
fi


##
## Clean
##
run -c "$CLEAN" -h 'Cleaning previous compilation' -u make clean


##
## Make dep?
##
if [ "$COMPILE_IMAGE" -a "$MAKE_DEP" == auto ]; then
	if [ ! "$VER" ]; then
		run -u -f make include/linux/version.h
		[ -f include/linux/version.h ] || \
			error 3 include/linux/version.h: missing
		VER=`sed -ne '/UTS_RELEASE/ s/^[^\"]*"\(.*\)"$/\1/ p' \
		         <include/linux/version.h`
	fi
	[ "${VER:0:4}" == 2.4. ] && MAKE_DEP=y || MAKE_DEP=
fi


##
## make *
##
run -c "$MAKE_DEP" -h 'Updating dependencies' -u make dep
run -c "$COMPILE_IMAGE" -h 'Compiling bzImage' -u make bzImage
run -c "$COMPILE_MODULES" -h 'Compiling modules' -u make modules
run -c "$INSTALL_MODULES" -h 'Installing modules' make modules_install


##
## Removing old images
##
if [ $TIDY_IMAGE ]; then
	header Removing old image
	for FILE in bzImage System.map config; do
		echo "  READLNK $FILE~"
		run -d readlink "/boot/$FILE~"
		LNK=`readlink "/boot/$FILE~" || true`
		if [ -f "/boot/$LNK" ]; then
			echo "  RM      $LNK"
			run rm -f -- "/boot/$LNK"
		fi
	done
fi


##
## Removing old modules
##
if [ $TIDY_MODULES ]; then
	header Removing old modules
	echo "  READLNK bzImage"
	run -d readlink "/boot/$FILE"
	TMP=`readlink "/boot/$FILE" || true`
	TMP="${TMP:8}"; OVER=
	while [ "$TMP" != "$OVER" ]; do OVER="$TMP"; TMP=${OVER%~}; done

	echo "  READLNK bzImage~"
	run -d readlink "/boot/$FILE~"
	TMP=`readlink "/boot/$FILE~" || true`
	TMP="${TMP:8}"; OOVER=
	while [ "$TMP" != "$OOVER" ]; do OOVER="$TMP"; TMP=${OOVER%~}; done

	if [ "$OOVER" -a "$OOVER" != "$VER" -a "$OOVER" != "$OVER" -a \
		-d "/lib/modules/$OOVER" ]; then
		echo "  RMDIR   /lib/modules/$OOVER"
		run rm -rfv -- "/lib/modules/$OOVER"
	fi
fi


##
## Copying image
##
if [ $INSTALL_IMAGE ]; then
	header Installing kernel
	if [ ! "$VER" ]; then
		run -u -f make include/linux/version.h
		[ -f include/linux/version.h ] || \
			error 3 include/linux/version.h: missing
		VER=`sed -ne '/UTS_RELEASE/ s/^[^\"]*"\(.*\)"$/\1/ p' \
		         <include/linux/version.h`
	fi
	if [ ! "$IMG_PATH" ]; then IMG_PATH="arch/$ARCH/boot/bzImage"; fi
	if [ ! "$MAP_PATH" ]; then MAP_PATH="System.map"; fi

	echo '  CP      bzImage'
	backup "/boot/bzImage-$VER"
	run cp -- "$IMG_PATH" "/boot/bzImage-$VER"

	echo '  CP      System.map'
	backup "/boot/System.map-$VER"
	run cp -- "$MAP_PATH" "/boot/System.map-$VER"

	echo '  CP      .config'
	backup "/boot/config-$VER"
	run cp -- .config "/boot/config-$VER"
fi



##
## Updating symlinks
##
if [ $UPDATE_SYMLINKS ]; then
	header Updating symlinks
	for FILE in bzImage System.map config; do
		echo "  READLNK $FILE"
		run -d "readlink /boot/$FILE" || true
		LNK=`readlink "/boot/$FILE" || true`
		if [ "$LNK" == "$FILE-$VER" ]; then
			echo "  LNK     $FILE~"
			run rm -f -- /boot/$FILE~
			run ln -s -- $FILE-$VER~ /boot/$FILE~
		else
			echo "  LNK     $FILE"
			run mv -f -- /boot/$FILE /boot/$FILE~ || true
			run ln -fs -- $FILE-$VER /boot/$FILE
		fi
	done
fi



##
## Running LILO
##
if [ $RUN_LILO == y ]; then
	header Running LILO
	run lilo
fi
