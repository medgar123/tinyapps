#!/bin/bash
##
## installkernel - Script for installing Linux kernel.
## $Id: installkernel,v 1.15 2005/08/13 13:22:26 mina86 Exp $
## Copyright (c) 2004,2005 by Michal Nazarewicz (mina86/AT/tlen.pl)
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##

##
## Version
##
if [ ! $INSIDE_INSTALLKERNEL ]; then
	echo 'installkernel  v0.11  (c) 2004,2005 by Micha³ Nazarewicz'
	echo '$Id: installkernel,v 1.15 2005/08/13 13:22:26 mina86 Exp $'
	echo
	if [ -f /tmp/installkernel-lockfile ]; then
		echo "${0##*/}: lockfile exists"
		declare -i $PID
		PID=`cat /tmp/installkernel-lockfile`
		if [ $PID -ne 0 ] && ps -p $PID >/dev/null 2>&1; then
			echo "${0##*/}: make sure only one instance of installkernel is running"
			echo "${0##*/}: or remove /tmp/installkernel-lockfile if that is the case"
			exit 4
		fi

		echo "${0##*/}: looks like invalid termination; removing lockfile"
		echo -n $$ >/tmp/installkernel-lockfile
	fi
fi


##
## Help
##
usage () {
	cat<<END
usage: installkernel [<options>] [<actions> [<switches>]
                     [<version> [<image> [<systemmap>]]]
<options> are:
  -h --help             Displays this screen and exits
  -V --version          Displays vesion and exits

  -a --arch=<arch>      Sets the ARCH variable                        [auto]
     --su               Tries to became root (implies --user=<current-user>)
  -u --user=<user>      Runs everything not requiring SU privilages as <user>
  -nu --no-user         Synonym of  --user=
     --nice=<nice>      Adjust priority by <nice>                     [auto]
     --no-nice          Synonym of  --nice=0

<actions> are:
     --cd=<dir>         Changes directory to <dir>
     --cd               Synonym of --cd=/usr/src/linux
  -p --patch=<patch>    Applies <patch> in the current directory

<switches> are:
     --dry-run          Only displays what would be done              [no]
     --print-commands   Prints commands (like --dry-run)              [no]
  -v --verbose          Becomes a lot more verbose                    [no]
  -vv                   Becomes even more verbose                     [no]
     --color            Uses colors                                   [auto]

     --run-hooks        Runs all hooks                                [yes]
     --run-pre-hooks    Runs all pre-* hooks                          [yes]
     --run-post-hooks   Runs all post-* hooks                         [yes]
     --run-<hook>       Runs <hook>'s scripts                         [yes]
     --run-<event>      Synonym of  --run-pre-<event> --run-post-<hook>

  -c --clean            Runs 'make clean' before compilation          [no]
  -d --make-dep         Runs 'make dep'                               [auto]

  -A --all              Synonym of all of the below

  -i --compile-image    Runs 'make bzImage' to compile image          [no]
  -I --install-image    Copies kernel to /boot directory              [yes]
     --tidy-image       Removes old images                            [no]
     --image            Synonym of the three above

  -m --compile-modules  Runs 'make modules'                           [no]
  -M --install-modules  Runs 'make modules_install'                   [no]
     --tidy-modules     Removes old modules                           [no]
     --modules          Synonym of the three above

     --compile          Synonym of  --compile-image --compile-modules
     --install          Synonym of  --install-image --install-modules
     --tidy             Synonym of  --tidy-image --tidy-modules

  -s --update-symlinks  Updates symlinks in /boot directory           [yes]
     --symlinks         Deprecated synonym of  --update-symlinks
  -l --update-loader    Runs 'lilo' to update MBR entry               [yes]
     --lilo             Deprecated synonym of  --lilo

<version>   kernel version (default: reads from include/linux/version.h)
<image>     path to kernel image (default: arch/\$ARCH/boot/bzImage)
<systemmap> path to System.map file (default: System.map)

END
}



##
## Prints error and exit
##
ARG0="${0##*/}"
error () {
	local ECODE="$1"
	shift
	printf "%s: %s\n" "$ARG0" "$*"
	exit $ECODE
}


##
## Prints header
##
header () {
	local TITLE="$*"
	if [ $USE_ANSI ]
	then printf "\e[32m=== \e[1m%s\e[0;32m " "$TITLE"
	else printf "=== %s " "$TITLE"
	fi
	local LOOP=$(( ${COLUMNS-80} - ${#TITLE} - 29))
	while [ $LOOP -gt 0 ]; do
		echo -n '='
		LOOP=$(($LOOP -1))
	done
	date +" [%y/%m/%d %H:%M:%S] ==="
	[ $USE_ANSI ] && echo -en '\e[0m'
}


##
## Runs command
##
run () {
	local AS=
	local SILENT=
	local DUMMY=
	local FORCE=
	local INPUT=/dev/stdin
	local OUTPUT=/dev/stdout

	# Arguments
	[ "$1" == "-u" ] && AS=yes      && shift
	[ "$1" == "-s" ] && SILENT=yes  && shift
	[ "$1" == "-f" ] && FORCE=yes   && shift
	[ "$1" == "-d" ] && DUMMY=yes   && shift
	[ "$1" == "-i" ] && INPUT="$2"  && shift 2
	[ "$1" == "-o" ] && OUTPUT="$2" && shift 2
	[ "$AS" -a ! "$RUNAS" ] && AS=

	# Dry run
	if [ "$DRY_RUN$PRINT_COMMANDS" -a ! "$SILENT" ]; then
		[ $USE_ANSI ] && echo -ne '\e[33m  RUN    ' || echo -n '  RUN    '
		[ $AS ] && echo -n " [as $RUNAS]"
		printf " '%s'" "$@"
		[ "$INPUT"  != /dev/stdin  ] && echo -n " <$INPUT"
		[ "$OUTPUT" != /dev/stdout ] && echo -n " >$OUTPUT"
		[ $USE_ANSI ] && echo -e '\e[0m' || echo
	fi
	[ "$DRY_RUN" -a ! "$FORCE" ] && return 0

	# Don't run really
	[ $DUMMY ] && return 0
	local EC=0

	# cd cannot be run throught su or nice
	if [ "$1" == cd ]; then
		"$@" || EC=$?
		return $?
	fi

	# Run not as
	if [ ! $AS ]; then
		if [ "$NICE" -ne 0 ]
		then nice -n "$NICE" "$@" <"$INPUT" >"$OUTPUT" || EC=$?
		else                 "$@" <"$INPUT" >"$OUTPUT" || EC=$?
		fi
		return $EC
	fi

	# Run as
	local ARGS=
	while [ $# -ne 0 ]; do
		ARGS="$ARGS '`echo "$1" | sed -e "s/'/'\\\\''/"`'"
		shift
	done
	if [ $NICE -ne 0 ]
	then nice -n "$NICE" su "$RUNAS" -c "$ARGS" <"$INPUT" >"$OUTPUT" || EC=$?
	else                 su "$RUNAS" -c "$ARGS" <"$INPUT" >"$OUTPUT" || EC=$?
	fi
	return $EC
}


##
## Runs /etc/installekrnel.d/$1/* scripts
##
run_scripts () {
	local DIR=$1
#	eval local RUN=\$RUN_`echo $DIR | tr a-z- A-Z_`
#	[ $RUN ] || return 0
	shift

	for SCRIPT in /etc/installkernel.d/* /etc/installkernel.d/$DIR/*; do
		if [ -f "$SCRIPT" -a -x "$SCRIPT" ]; then
			run "$@" "$SCRIPT" $DIR
		fi
	done
}


##
## Runs header, run_scripts and run
##
r () {
	eval [ \$$1 ] || return 0
	local NAME=`echo $1 | tr A-Z_ a-z-`
	header "$2"
	shift 2
	run_scripts pre-$NAME
	run "$@"
	run_scripts post-$NAME
}

ur () {
	eval [ \$$1 ] || return 0
	local NAME=`echo $1 | tr A-Z_ a-z-`
	header "$2"
	shift 2
	run_scripts pre-$NAME -u
	run -u "$@"
	run_scripts post-$NAME -u
}


##
## Backups specified file(s)
##
backup () {
	local ARG=
	[ "$1" == -u ] && ARG="-u" && shift
	while [ "$1" ]; do
		if [ -f "$1" ]; then
			[ -f "$1~" ] && backup $ARG "$1~"
			run $ARG mv -f$V -- "$1" "$1~"
		fi
		shift
	done
}


##
## Signals etc
##
interrupted () {
	if [ $USE_ANSI ]
	then echo -e '\e[31;1m  SIG    Got SIG'$1'; terminating...\e[0m'
	else echo '  SIG    Got SIG$1; terminating...'
	fi

	[ -f /tmp/installkernel-$$ ]       && run rm -f /tmp/installkernel-$$
	[ -f /tmp/installkernel-lockfile ] && run rm -f /tmp/installkernel-lockfile

	exit 3
}

set -e
for E in HUP INT QUIT ABRT SEGV PIPE ALRM TERM USR1 USR2; do
	trap "interrupted $E" $E
done


##
## Reads various things
##
update_ver () {
	[ $VER ] || return 0
	run -u -f make $MAKEV include/linux/version.h
	[ -f include/linux/version.h ] || error 3 include/linux/version.h: missing
	VER=`sed -ne '/UTS_RELEASE/ s/^[^\"]*"\(.*\)"$/\1/ p' \
	         <include/linux/version.h`
	echo "  VER     $VER"
}

update_build () {
	[ $BUILD ] || return 0
	if [ ! -s .version ]; then BUILD=1; else
		run -u -d cat .version
		BUILD=`run -u -s -f cat .version`
	fi
	echo "  BUILD   $BUILD"
	FVER="$VER-#$BUILD"
}



##
## Init default options
##
if [ ! $INSIDE_INSTALLKERNEL ]; then
	export VER= BUILD= IMG_PATH= MAP_PATH= SU= RUNAS= NICE=auto ARCH=

	export DRY_RUN= PRINT_COMMANDS= VERBOSE= REALLY_VERBOSE=
	[ -t ] && export USE_ANSI=y || export USE_ANSI=

	export MAKE_DEP=auto CLEAN= COMPILE_IMAGE= COMPILE_MODULES=
	export INSTALL_IMAGE=y INSTALL_MODULES= UPDATE_SYMLINKS=y
	export UPDATE_LOADER=y TIDY_IMAGE= TIDY_MODULES=

	declare -a ACTIONS
	ACTION_COUNT=0

	for EVENT in CLEAN MAKE_DEP UPDATE_SYMLINKS UPDATE_LOADER \
		{COMPILE,INSTALL,TIDY}_{IMAGE,MODULES}; do
		eval export RUN_PRE_$EVENT=y RUN_POST_$EVENT=y
	done
	export RUN_PRE=y RUN_POST=y


##
## Parse arguments
##
	while [ "$1" ]; do
		PARAM=

		## Argument
		case "$1" in
		(--help|-h) usage; exit 0; ;;
		(--version|-V) exit 0; ;;

		(--arch=*) ARCH="${1:7}"; ;;
		(-a*) ARCH="${1:2}"; ;;

		(--cd=*)
			ACTIONS[$ACTION_COUNT]=cd;
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			ACTIONS[$ACTION_COUNT]="${1:5}"
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			;;
		(--cd)
			ACTIONS[$ACTION_COUNT]=cd;
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			ACTIONS[$ACTION_COUNT]=/usr/src/linux
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			;;


		(-p*|--patch=*)
			ACTIONS[$ACTION_COUNT]=patch;
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			[ ${1:1:1} == p ] && ACTIONS[$ACTION_COUNT]="${1:2}" || \
				ACTIONS[$ACTION_COUNT]="${1:8}"
			ACTION_COUNT=$(($ACTION_COUNT + 1))
			;;

		(--su) SU=y; ;;
		(--user=*) RUNAS="${1:7}"; ;;
		(-nu|--no-user) RUNAS=; ;;
		(-u*) RUNAS="${1:2}"; ;;
		(--nice=*) NICE="${1:7}"; ;;
		(--no-nice) NICE=0; ;;

		(-n*)    VALUE= : PARAM="-${1:2}"; ;;
		(--no-*) VALUE= ; PARAM="--${1:5}"; ;;
		(--*)    VALUE=y; PARAM="--${1:2}"; ;;
		(-*)     VALUE=y; PARAM="-${1:1}"; ;;

		(*)
			if   [ -z "$VER"      ]; then VER="$1"
			elif [ -z "$IMG_PATH" ]; then IMG_PATH="$1"
			elif [ -z "$MAP_PATH" ]; then MAP_PATH="$1"
			else error 1 unknown option: "$1"
			fi
		;;
		esac


		## Switches
		[ ! "$PARAM" ] && shift && continue;
		HOOK=
		case "$PARAM" in
		(--dry-run)        DRY_RUN=$VALUE ; ;;
		(-v|--verbose)     VERBOSE=$VALUE ; [ $VALUE ] && PRINT_COMMANDS=y; ;;
		(-vv)              REALLY_VERBOSE=$VALUE; [ $VALUE ] && VERBOSE=y && PRINT_COMMANDS=y; ;;
		(--print-commands) PRINT_COMMANDS=$VALUE; ;;
		(--color)          USE_ANSI=$VALUE; ;;

		(-c|--clean)           CLEAN=$VALUE          ; ;;
		(-d|--make-dep)        MAKE_DEP=$VALUE       ; ;;

		(-i|--compile-image)   COMPILE_IMAGE=$VALUE  ; ;;
		(-I|--install-image)   INSTALL_IMAGE=$VALUE  ; ;;
		(--tidy-image)         TIDY_IMAGE=$VALUE     ; ;;
		(--image)              COMPILE_IMAGE=$VALUE  ;
                               INSTALL_IMAGE=$VALUE  ; TIDY_IMAGE=$VALUE;;

		(-m|--compile-modules) COMPILE_MODULES=$VALUE; ;;
		(-M|--install-modules) INSTALL_MODULES=$VALUE; ;;
		(-t|--tidy-modules)    TIDY_MODULES=$VALUE   ; ;;
		(--modules)            COMPILE_MODULES=$VALUE;
                               INSTALL_MODULES=$VALUE; TIDY_MODULES=$VALUE;;

		(--compile) COMPILE_IMAGE=$VALUE; COMPILE_MODULES=$VALUE; ;;
		(--install) INSTALL_IMAGE=$VALUE; INSTALL_MODULES=$VALUE; ;;
		(--tidy)    TIDY_IMAGE=$VALUE   ; TIDY_MODULES=$VALUE   ; ;;

		(-s|--symlinks|--update-symlink) UPDATE_SYMLINKS=$VALUE; ;;
		(-l|--lilo|--update-loader)      UPDATE_LOADER=$VALUE  ; ;;

		(-A|--all)
			COMPILE_IMAGE=$VALUE  ; COMPILE_MODULES=$VALUE
			INSTALL_IMAGE=$VALUE  ; INSTALL_MODULES=$VALUE
			TIDY_IMAGE=$VALUE     ; TIDY_MODULES=$VALUE
			UPDATE_SYMLINKS=$VALUE; UPDATE_LOADER=$VALUE
			;;

		(--run-*) HOOK="${PARAM:6}"; ;;

		(*) error 1 unknown option: "$1"; ;;
		esac


		## Hooks
		[ ! "$HOOK" ] && shift && continue;

		if   [ "${HOOK:0:4}" == pre-  ]; then PRE='PRE_' ; HOOK="${HOOK:4}"
		elif [ "${HOOK:0:5}" == post- ]; then PRE='POST_'; HOOK="${HOOK:5}"
		else PRE=; fi

		case "$HOOK" in
		(hooks)
			for EVENT in CLEAN MAKE_DEP UPDATE_SYMLINKS UPDATE_LOADER \
				{COMPILE,INSTALL,TIDY}_{IMAGE,MODULES}; do
				if [ $PRE ]
				then eval RUN_$PRE$EVENT=$VALUE
				else eval RUN_PRE_$EVENT=$VALUE RUN_POST_$EVENT=$VALUE
				fi
			done
			;;

		(clean|make-dep|update-symlinks|update-loader|compile-image|install-image|tidy-image|compile-modules|install-modules|tidy-modules)
			EVET=`echo $HOOK | tr a-z- A-Z_`
			if [ $PRE ]
			then eval RUN_$PRE$EVENT=$VALUE
			else eval RUN_PRE_$EVENT=$VALUE RUN_POST_$EVENT=$VALUE
			fi
			;;

		(pre|post)
			[ $PRE ] && error 1 event $HOOK cannot have pre-/post- prefix
			EVET=`echo $HOOK | tr a-z- A-Z_`
			eval RUN_$EVENT=$VALUE
			;;

		(*) error 1 unknown event: "$HOOK"; ;;
		esac

		shift
	done
fi


[ "$INSIDE_INSTALLKERNEL" ] ||  header Starting
export INSIDE_INSTALLKERNEL=y
set -- "${ACTIONS[@]}"
unset ACTIONS ACTION_COUNT
[ $VERBOSE ] && V=v && VOPT=-v
[ $REALLY_VERBOSE ] && MAKEV=v=1 || MAKEV=


##
## Calculate nice
##
if [ "$NICE" == auto ]; then
	NICE=$((10 - `nice`))
	[ $NICE -lt 0 ] && NICE=0
fi
declare -i NICE
NICE=$NICE


##
## Set ARCH
##
if [ -z "$ARCH" ]; then
	ARCH=`uname -m | sed -e 's/i.86/i386/' -e 's/sun4u/sparc64/' \
	                     -e 's/arm.*/arm/' -e 's/sa110/arm/' \
	                     -e 's/s390x/s390/' -e 's/parisc64/parisc/'`
	echo "  ARCH    $ARCH"
fi


##
## Become root ?
##
if [ "$SU" -a $EUID -ne 0 ]; then
	if [ "$NICE" -ne 0 ]; then
		echo "  SU      Becoming super user and setting nice"
	else
		echo "  SU      Becoming super user"
	fi

	[ "$RUNAS" ] || RUNAS="$USER"
	SU=
	NICETMP="$NICE";
	NICE=0

	if [ $DRY_RUN ]; then
		echo Here you would be asked for root password.
	else
		ARGS="'`echo "$0" | sed -e "s/'/'\\\\''/"`'"
		while [ $# -ne 0 ]; do
			ARGS="$ARGS '`echo "$1" | sed -e "s/'/'\\\\''/"`'"
			shift
		done
		if [ "$NICETMP" -ne 0 ]
		then nice -n "$NICETMP" su -c "$ARGS"
		else                    su -c "$ARGS"
		fi
		exit $?
	fi
fi


run_scripts pre


##
## Patching and changing directories
##
while [ "$1" ]; do
	if [ "$1" == cd ]; then
		echo "  CD      $2"
		run -f cd -- "$2"
		shift 2
		continue;
	fi

	if [ "$1" != patch ]; then error 3 Internal error; fi

	PATCH="$2"
	FORCE=;   [ "${PATCH:0:1}" == !  ] && FORCE=y   && PATCH="${PATCH:1}"
	REVERSE=; [ "${PATCH:0:2}" == -r ] && REVERSE=R && PATCH="${PATCH:2}"
	[ $VERBOSE ] || REVERSE="s$REVERSE"

	CUT=`expr "$PATCH" : '[0-9][0-9]*:' || true`
	if [ $CUT -ne 0 ]; then
		LEVEL="${PATCH:0:$CUT}"; LEVEL="${LEVEL%:}"
		PATCH="${PATCH:$CUT}"
	else
		LEVEL=1
	fi

	if [ "${PATCH:0:1}" == = ]
	then PATCH="${PATCH:1}"
	elif [ "${PATCH:0:2}" == - ]
	then PATCH="${PATCH:2}"
	fi

	[ -f "$PATCH" ] || error 2 "$PATCH: no such file"
	[ -r "$PATCH" ] || error 2 "$PATCH: unreadable"

	echo "  DECOMP  $PATCH"
	[ -h /tmp/installkernel-$$ ] && run rm -f /tmp/installkernel-$$
	case "$PATCH" in
	(*.bz2) run -u -i "$PATCH" -o /tmp/installkernel-$$  bzip2    -d$V; ;;
	(*.gz)  run -u -i "$PATCH" -o /tmp/installkernel-$$  gzip     -d$V; ;;
	(*.Z)   run -u -i "$PATCH" -o /tmp/installkernel-$$  compress -d$V; ;;
	(*)     run -u ln -s$V "$PATCH" /tmp/installkernel-$$; ;;
	esac

	if [ ! "$FORCE" ]; then
		echo "  TEST    $PATCH"
		run -i /tmp/installkernel-$$ patch -f{$REVERSE}p$LEVEL --dry-run
	fi

	run -i /tmp/installkernel-$$ patch -f{$REVERSE}p$LEVEL
	run rm -f$V /tmp/installkernel-$$
	shift 2
done


##
## Make dep?
##
if [ "$COMPILE_IMAGE" -a "$MAKE_DEP" == auto ]; then
	update_ver
	[ "${VER:0:4}" == 2.4. ] && MAKE_DEP=y || MAKE_DEP=
fi


##
## make *
##
ur CLEAN           'Cleaning previous compilation' make $MAKEV clean
ur MAKE_DEP        'Updating dependencies'         make $MAKEV dep
ur COMPILE_IMAGE   'Compiling bzImage'             make $MAKEV bzImage
ur COMPILE_MODULES 'Compiling modules'             make $MAKEV modules
 r INSTALL_MODULES 'Installing modules'            make $MAKEV modules_install


##
## Removing old images
##
if [ $TIDY_IMAGE ]; then
	header Removing old image
	run_scripts pre-tidy-image

	for FILE in bzImage System.map config; do
		echo "  READLNK $FILE~"
		run -d readlink "/boot/$FILE~"
		LNK=`readlink "/boot/$FILE~" || true`
		if [ -f "/boot/$LNK" ]; then
			echo "  RM      $LNK"
			run rm -f$V -- "/boot/$LNK"
		fi
	done

	run_scripts post-tidy-image
fi


##
## Removing old modules
##
if [ $TIDY_MODULES ]; then
	header Removing old modules
	run_scripts pre-tidy-modules

	update_ver

	echo "  READLNK bzImage"
	run -d readlink "/boot/$FILE"
	TMP=`readlink "/boot/$FILE" || true`
	TMP="${TMP:8}"; OVER=
	while [ "$TMP" != "$OVER" ]; do OVER="$TMP"; TMP=${OVER%~}; done

	echo "  READLNK bzImage~"
	run -d readlink "/boot/$FILE~"
	TMP=`readlink "/boot/$FILE~" || true`
	TMP="${TMP:8}"; OOVER=
	while [ "$TMP" != "$OOVER" ]; do OOVER="$TMP"; TMP=${OOVER%~}; done

	if [ "$OOVER" -a "$OOVER" != "$VER" -a "$OOVER" != "$OVER" -a \
		-d "/lib/modules/$OOVER" ]; then
		echo "  RMDIR   /lib/modules/$OOVER"
		run rm -rf$V -- "/lib/modules/$OOVER"
	fi

	run_scripts post-tidy-modules
fi


##
## Copying image
##
if [ $INSTALL_IMAGE ]; then
	header Installing kernel
	run_scripts pre-install-image

	update_ver
	update_build
	if [ ! "$IMG_PATH" ]; then IMG_PATH="arch/$ARCH/boot/bzImage"; fi
	if [ ! "$MAP_PATH" ]; then MAP_PATH="System.map"; fi

	echo '  CP      bzImage'
	backup "/boot/bzImage-$FVER"
	run cp $VOPT -- "$IMG_PATH" "/boot/bzImage-$FVER"

	echo '  CP      System.map'
	backup "/boot/System.map-$FVER"
	run cp $VOPT -- "$MAP_PATH" "/boot/System.map-$FVER"

	echo '  CP      .config'
	backup "/boot/config-$FVER"
	run cp $VOPT -- .config "/boot/config-$FVER"

	run_scripts post-install-image
fi



##
## Updating symlinks
##
if [ $UPDATE_SYMLINKS ]; then
	header Updating symlinks
	run_scripts pre-update-symlinks

	update_ver
	update_build

	for FILE in bzImage System.map config; do
		echo "  READLNK $FILE"
		run -d readlink /boot/$FILE || true
		LNK=`readlink "/boot/$FILE" || true`
		if [ "$LNK" == "$FILE-$FVER" ]; then
			echo "  LNK     $FILE~"
			run rm -f$V -- /boot/$FILE~
			run ln -s$V -- $FILE-$FVER~ /boot/$FILE~
		else
			echo "  LNK     $FILE"
			run mv -f$V -- /boot/$FILE /boot/$FILE~ || true
			run ln -fs$V -- $FILE-$FVER /boot/$FILE
		fi
	done

	run_scripts post-update-symlinks
fi



##
## Running LILO
##
 r UPDATE_LOADER   'Running LILO'                  lilo $VOPT



run_scripts post
