#!/bin/bash
##
## installkernel - Script for installing Linux kernel.
## $Id: installkernel,v 1.24 2005/10/11 07:56:54 mina86 Exp $
## Copyright (c) 2004,2005 by Michal Nazarewicz (mina86/AT/tlen.pl)
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##


##
## Some nice functions
##
toInt  () {
	expr 0$(expr "X$1" : 'X[[:space:]]*\([0-9]*\)' 2>/dev/null || true) + 0
}


##
## Version
##
if [ -z "$INSIDE_INSTALLKERNEL" ]; then
	echo 'installkernel  v0.13.2  (c) 2004,2005 by Micha³ Nazarewicz'
	echo '$Id: installkernel,v 1.24 2005/10/11 07:56:54 mina86 Exp $'
	echo
	if [ -f /tmp/installkernel-lockfile ]; then
		echo "${0##*/}: lockfile exists"
		PID="$(toInt "`cat /tmp/installkernel-lockfile`")"
		if [ $PID -ne 0 ] && ps -p $PID >/dev/null 2>&1; then
			echo "${0##*/}: make sure only one instance of installkernel is running"
			echo "${0##*/}: or remove /tmp/installkernel-lockfile if that is the case"
			INSTALLKERNEL_EXITED=4
			exit 4
		fi
		unset PID
		echo "${0##*/}: looks like invalid termination; removing lockfile"
	fi

	printf "%d" $$ >|/tmp/installkernel-lockfile
fi
KBUILD_OUTPUT

##
## Help
##
usage () {
	cat<<END
usage: installkernel [<options>] [<actions> [<switches>]
                     [<version> [<image> [<systemmap> [<prefix>]]]]
<options> are:
  -h --help             Displays this screen and exits
  -V --version          Displays vesion and exits

  -a --arch=<arch>      Sets the ARCH variable                        [auto]
  -O --output=<dir>     Sets the output directory (2.6.x required)
  -O --output           Synonym of --output=Build

     --su               Tries to became root (implies --user=<current-user>)
  -u --user=<user>      Runs everything not requiring SU privilages as <user>
  -nu --no-user         Synonym of  --user=
     --nice=<nice>      Adjust priority by <nice>                     [auto]
     --no-nice          Synonym of  --nice=0

  -L --log=<file>       Logs everything to <file> not to stdout
  -L --log              Logs to automaticly choosen file
  -nL --no-log          Cancels previous --log options

<actions> are:
     --cd=<dir>         Changes directory to <dir>
     --cd               Synonym of --cd=/usr/src/linux
  -p --patch=<patch>    Applies <patch> in the current directory

<switches> are:
     --dry-run          Only displays what would be done              [no]
     --print-commands   Prints commands (like --dry-run)              [no]
  -v --verbose          Becomes a lot more verbose                    [no]
  -vv                   Becomes even more verbose                     [no]
     --color            Uses colors                                   [auto]

     --run-hooks        Runs all hooks                                [yes]
     --run-pre-hooks    Runs all pre-* hooks                          [yes]
     --run-post-hooks   Runs all post-* hooks                         [yes]
     --run-<hook>       Runs <hook>'s scripts                         [yes]
     --run-<event>      Synonym of  --run-pre-<event> --run-post-<hook>

  -c --clean            Runs 'make clean' before compilation          [no]
  -C --config           Runs 'make (x|g|menu|)config' to configure    [no]
  -C --config=<cfg>     Specifies a type of config to run             [auto]
  -d --make-dep         Runs 'make dep'                               [auto]

  -A --all              Synonym of all of the below

  -i --compile-image    Runs 'make bzImage' to compile image          [no]
  -I --install-image    Copies kernel to /boot directory              [*]
     --tidy-image       Removes old images                            [no]
     --image            Synonym of the three above

  -m --compile-modules  Runs 'make modules'                           [no]
  -M --install-modules  Runs 'make modules_install'                   [no]
     --tidy-modules     Removes old modules                           [no]
     --modules          Synonym of the three above

     --compile          Synonym of  --compile-image --compile-modules
     --install          Synonym of  --install-image --install-modules
     --tidy             Synonym of  --tidy-image --tidy-modules

  -s --update-symlinks  Updates symlinks in /boot directory           [*]
     --symlinks         Deprecated synonym of  --update-symlinks
  -l --update-loader    Runs 'lilo' to update MBR entry               [*[
     --lilo             Deprecated synonym of  --lilo

<version>   kernel version (default: reads from include/linux/version.h)
<image>     path to kernel image (default: arch/\$ARCH/boot/bzImage)
<systemmap> path to System.map file (default: System.map)
<prefix>    ignored

See 'man 8 installkernel' for further infoormation.

END
}


##
## Printing helpers
##
error () {
	__ECODE="$1"
	shift
	echo "${0##*/}: $*" >&2
	INSTALLKERNEL_EXITED=$__ECODE
	exit $__ECODE
}

msg () {
	if [ -n "$USE_ANSI" ] && [ -n "$1" ]
	then printf '  \33[%sm%-7s %s\33[0m\n' "$1" "$2" "$3"
	else printf '  %-7s %s\n' "$2" "$3"
	fi
}


##
## Prints header
##
if [ -z "$COLUMNS" ]; then
	COLS=`toInt "$(stty -a | sed -ne 's/^.*columns[[:space:]][[:space:]]*\([0-9][0-9]*\).*$/\1/p')"`
	if [ $COLS -gt 30 ]; then
		COLUMNS=$COLS
	fi
fi

header () {
	__TITLE="$*"
	if [ -n "$USE_ANSI" ]
	then printf "\33[32m=== \33[1m%s\33[0;32m " "$__TITLE"
	else printf "=== %s " "$__TITLE"
	fi

	__LOOP=$(( ${COLUMNS-80} - ${#__TITLE} - 29))
	__STR=
	while [ $__LOOP -gt 0 ]; do
		__STR="$__STR="
		__LOOP=$(( $__LOOP - 1 ))
	done

	date +"$__STR [%y/%m/%d %H:%M:%S] ==="
	if [ -n "$USE_ANSI" ]; then printf '\33[0m'; fi
	return 0
}


##
## Runs command
##
run () {
	__AS=
	__SILENT=
	__DUMMY=
	__FORCE=
	__INPUT=/dev/stdin
	__OUTPUT=/dev/stdout

	# Arguments
	while expr "X$1" : X- >/dev/null 2>&1; do
		__ARG="${1-}"; shift;
		while [ -n "$__ARG" ]; do
			case "$__ARG" in
				(u*) __AS="$RUNAS"; ;;
				(s*) __SILENT=yes ; ;;
				(f*) __FORCE=yes  ; ;;
				(d*) __DUMMY=yes  ; ;;
				(i*) __INPUT="$1" ; shift; ;;
				(o*) __OUTPUT="$1"; shift; ;;
			esac
			__ARG="${__ARG#?}"
		done
	done

	# Dry run
	if [ -n "$DRY_RUN$PRINT_COMMANDS" ] && [ -z "$__SILENT" ]; then
		if [ $__AS ]; then __MSG=" [as $__AS]"; else __MSG=""; fi
		__END=""
		if [ "$__INPUT"  != /dev/stdin  ]; then __END="<$__INPUT "; fi
		if [ "$__OUTPUT" != /dev/stdout ]; then __END="$__END>$__OUTPUT"; fi
		msg '36' RUN "$_MSG`printf "'%s' " "$@"`$__END"
	fi

	# Don't run really
	if [ -n "$DRY_RUN" ] && [ -z "$__FORCE" ]; then return 0; fi
	if [ -n "$__DUMMY" ]; then return 0; fi
	__EC=0

	# cd cannot be run throught su or nice
	if [ "X$1" = Xcd ]; then
		"$@" || __EC=$?
		return $__EC
	fi

	# Run not as
	if [ -z "$__AS" ]; then
		if [ $NICE -ne 0 ]
		then nice -n "$NICE" "$@" <"$__INPUT" >"$__OUTPUT" || __EC=$?
		else                 "$@" <"$__INPUT" >"$__OUTPUT" || __EC=$?
		fi
		return $__EC
	fi

	# Run as
	__ARGS=
	while [ $# -ne 0 ]; do
		__ARGS="$ARGS '`echo "$1" | sed -e "s/'/'\\\\''/"`'"
		shift
	done
	if [ $NICE -ne 0 ]
	then nice -n $NICE su "$__AS" -c "$ARGS" <"$__INPUT" >"$__OUTPUT" || __EC=$?
	else               su "$__AS" -c "$ARGS" <"$__INPUT" >"$__OUTPUT" || __EC=$?
	fi
	return $__EC
}


##
## Runs /etc/installekrnel.d/$1/* scripts
##
run_scripts () {
	__DIR=$1; shift
	if eval [ -z \"\$RUN_`echo $__DIR | tr a-z- A-Z_`\" ]; then return 0; fi

	for __SCRIPT in /etc/installkernel.d/* /etc/installkernel.d/$__DIR/*; do
		if [ -f "$__SCRIPT" ] && [ -x "$__SCRIPT" ]; then
			run "$@" "$__SCRIPT" $__DIR
		fi
	done
}


##
## Runs header, run_scripts and run
##
r () {
	if eval [ -z \"\$$1\" ]; then return 0; fi
	__NAME=`echo $1 | tr A-Z_ a-z-`
	header "$2"
	shift 2
	run_scripts pre-$__NAME
	run "$@"
	run_scripts post-$__NAME
}

ur () {
	if eval [ -z \"\$$1\" ]; then return 0; fi
	__NAME=`echo "$1" | tr A-Z_ a-z-`
	header "$2"
	shift 2
	run_scripts pre-$__NAME -u
	run -u "$@"
	run_scripts post-$__NAME -u
}


##
## Backups specified file(s)
##
backup () {
	while [ "$1" ]; do
		if [ -f "$1" ]; then
			if [ -f "$1~" ]; then
				set -- "$1~" "$@"
				continue
			fi
			run mv -f$V -- "$1" "$1~"
		fi
		shift
	done
	return 0
}


##
## Signals etc
##
sig_handler () {
	msg 31 SIG "Got SIG$1; terminating..."
	error 5 "Got SIG$1; terminating..."
}

for E in HUP INT QUIT ILL ABRT FPE SEGV PIPE ALRM TERM TSTP; do
	trap "sig_handler $E" $E
done
trap "" USR1 USR2
set -e

exit_function () {
	__EC=$?
	rm -f /tmp/installkernel-$$ /tmp/installkernel-lockfile
	if [ "X$LOG_AUTO" = Xstarted ]; then
		date +'---- END ---- installkernel log file --- %y/%m/%d %H:%M:%S ---'
	fi
	if [ $__EC -ne 0 ] && [ $INSTALLKERNEL_EXITED -ne $__EC ]; then
		msg 31 ERR "Comand's exit code: $__EC"
		error $__EC "Comand's exit code: $__EC"
	fi
	return 0
}

trap exit_function 0


##
## Reads various things
##
update_ver () {
	if [ -n "$VER" ]; then return 0; fi
	run -uf make $MAKEV include/linux/version.h
	[ -f include/linux/version.h ] || error 2 include/linux/version.h: missing
	[ -r include/linux/version.h ] || error 2 include/linux/version.h: unreadable
	VER=`sed -ne '/UTS_RELEASE/ s/^[^\"]*"\(.*\)"$/\1/ p' \
	         <include/linux/version.h`
	msg '37;1' VER "$VER"
}

update_build () {
	update_ver
	if [ -n "$BUILD" ]; then return 0; fi
	if [ ! -s .version ]; then BUILD=1; else
		run -ud cat .version
		BUILD=`run -usf cat .version`
	fi
	msg '37;1' BUILD "$BUILD"
	FVER="$VER-#$BUILD"
}


##
## Set hooks
##
set_run_hooks () {
	for EVENT in CLEAN CONFIG MAKE_DEP UPDATE_SYMLINKS UPDATE_LOADER \
		COMPILE_IMAGE INSTALL_IMAGE TIDY_IMAGE \
		COMPILE_MODULES INSTALL_MODULES TIDY_MODULES; do
		if [ -n "$2" ]
		then eval export RUN_$2$EVENT=$1
		else eval export RUN_PRE_$EVENT=$1 RUN_POST_$EVENT=$1
		fi
	done
	if [ -n "$2" ]
	then eval export RUN_${2%_}=$1
	else eval export RUN_PRE=$1 RUN_POST=$1
	fi
}


if [ -z "$INSIDE_INSTALLKERNEL" ]; then
	##
	## Init default options
	##
	export VER= BUILD= IMG_PATH= MAP_PATH= RUNAS= NICE=auto ARCH=
	SU=

	export DRY_RUN= PRINT_COMMANDS= VERBOSE= REALLY_VERBOSE=
	if [ -t 1 ]; then export USE_ANSI=y; else export USE_ANSI=; fi

	export CLEAN= COMPILE_IMAGE= COMPILE_MODULES= INSTALL_IMAGE=
	export INSTALL_MODULES= UPDATE_SYMLINKS= UPDATE_LOADER= TIDY_IMAGE=
	export TIDY_MODULES= CONFIG=
	export CONFIG_TYPE=auto MAKE_DEP=auto

	set_run_hooks y


	##
	## Parse arguments
	##
	FIRST=y
	ADD_ARGS=0
	NUMARGS=$#
	for ARG; do
		if [ -n "$FIRST" ]; then FIRST=; set --; fi
		PARAM=

		## Options
		case "$ARG" in
		(--help|-h) usage; exit 0; ;;
		(--version|-V) exit 0; ;;

		(--arch=*) ARCH="${ARG#--arch-}"; ;;
		(-a*)      ARCH="${ARG#-a}";      ;;
		(-O|--output) export KBUILD_OUTPUT=Build; ;;
		(-O*)         export KBUILD_OUTPUT="${ARG#-O}"; ;;
		(--output=)   unset KBUILD_OUTPUT; ;;
		(--output=*)  export KBUILD_OUTPUT="${ARG#--output=}"; ;;

		(--log=*) LOG_AUTO=;  USE_ANSI=; LOG_FILE="${ARG#--log=}"; ;;
		(-L*)     LOG_AUTO=;  USE_ANSI=; LOG_FILE="${ARG#-L}";     ;;
		(--log)   LOG_AUTO=y; USE_ANSI=; ;;
		(-L)      LOG_AUTO=y; USE_ANSI=; ;;
		(-nL|--no-log) LOG_AUTO=; LOG_FILE=; ;;

		(--cd=*)    set -- "$@" cd    "${ARG#--cd=}";    ;;
		(--cd)      set -- "$@" cd    /usr/src/linux;    ;;
		(-p*)       set -- "$@" patch "${ARG#-p}";       ;;
		(--patch=*) set -- "$@" patch "${ARG#--patch=}"; ;;

		(--config=no)      CONFIG=; ;;
		(--config=auto)    CONFIG=y; CONFIG_TYPE=auto; ;;
		(--config=*config) CONFIG=y; CONFIG_TYPE="${ARG#--config=}"; ;;
		(--config=*)       error 1 invalid config type: "${ARG#--config=}"; ;;

		(--su)          SU=y; RUNAS="$(id -un)"; ;;
		(--user=*)      RUNAS="${ARG#--user=}"; ;;
		(-u*)           RUNAS="${ARG#-u}"; ;;
		(-nu|--no-user) RUNAS=; ;;
		(--nice=*)      NICE="${ARG#--nice=}"; ;;
		(--no-nice)     NICE=0; ;;

		(-n?)    VALUE= : PARAM="-${ARG#-n}"; ;;
		(--no-*) VALUE= ; PARAM="--${ARG#--no-}"; ;;
		(--*)    VALUE=y; PARAM="--${ARG#--}"; ;;
		(-?)     VALUE=y; PARAM="$ARG"; ;;

		(*)
			if   [ $ADD_ARGS -eq 0 ]; then VER="$ARG"
			elif [ $ADD_ARGS -eq 1 ]; then IMG_PATH="$ARG"
			elif [ $ADD_ARGS -eq 2 ]; then MAP_PATH="$ARG"
			elif [ $ADD_ARGS -ne 3 ]; then error 1 unknown option: "$ARG"
			fi
			ADD_ARGS=$(( $ADD_ARGS + 1 ))
		;;
		esac


		## Switches
		if [ -z "$PARAM" ]; then continue; fi
		HOOK=
		case "$PARAM" in
		(--dry-run)        DRY_RUN=$VALUE ; ;;
		(-v|--verbose)     VERBOSE=$VALUE ;
		                   if [ -n "$VALUE" ]; then PRINT_COMMANDS=y; fi; ;;
		(-vv)              REALLY_VERBOSE=$VALUE;
                    if [ -n "$VALUE" ]; then VERBOSE=y; PRINT_COMMANDS=y; fi; ;;
		(--print-commands) PRINT_COMMANDS=$VALUE; ;;
		(--color)          USE_ANSI=$VALUE; ;;

		(-c|--clean)           CLEAN=$VALUE          ; ;;
		(-C|--config)          CONFIG=$VALUE         ; ;;
		(-d|--make-dep)        MAKE_DEP=$VALUE       ; ;;

		(-i|--compile-image)   COMPILE_IMAGE=$VALUE  ; ;;
		(-I|--install-image)   INSTALL_IMAGE=$VALUE  ; ;;
		(--tidy-image)         TIDY_IMAGE=$VALUE     ; ;;
		(--image)              COMPILE_IMAGE=$VALUE  ;
                               INSTALL_IMAGE=$VALUE  ; TIDY_IMAGE=$VALUE;;

		(-m|--compile-modules) COMPILE_MODULES=$VALUE; ;;
		(-M|--install-modules) INSTALL_MODULES=$VALUE; ;;
		(-t|--tidy-modules)    TIDY_MODULES=$VALUE   ; ;;
		(--modules)            COMPILE_MODULES=$VALUE;
                               INSTALL_MODULES=$VALUE; TIDY_MODULES=$VALUE;;

		(--compile) COMPILE_IMAGE=$VALUE; COMPILE_MODULES=$VALUE; ;;
		(--install) INSTALL_IMAGE=$VALUE; INSTALL_MODULES=$VALUE; ;;
		(--tidy)    TIDY_IMAGE=$VALUE   ; TIDY_MODULES=$VALUE   ; ;;

		(-s|--symlinks|--update-symlinks) UPDATE_SYMLINKS=$VALUE; ;;
		(-l|--lilo|--update-loader)       UPDATE_LOADER=$VALUE  ; ;;

		(-A|--all)
			COMPILE_IMAGE=$VALUE  ; COMPILE_MODULES=$VALUE
			INSTALL_IMAGE=$VALUE  ; INSTALL_MODULES=$VALUE
			TIDY_IMAGE=$VALUE     ; TIDY_MODULES=$VALUE
			UPDATE_SYMLINKS=$VALUE; UPDATE_LOADER=$VALUE
			;;

		(--run-*) HOOK="${PARAM#--run-}"; ;;

		(*) error 1 unknown option: "$ARG"; ;;
		esac


		## Hooks
		if [ -z "$HOOK" ]; then continue; fi

		if   expr "X$HOOK" : Xpre-  >/dev/null 2>&1
		then PRE='PRE_' ; HOOK="${HOOK#pre-}"
		elif expr "X$HOOK" : Xpost- >/dev/null 2>&1
		then PRE='POST_'; HOOK="${HOOK#post-}"
		else PRE=; fi

		case "$HOOK" in
		(hooks) set_run_hooks "$VALUE" "$PRE"; ;;

		(clean|config|make-dep|update-symlinks|update-loader|compile-image|install-image|tidy-image|compile-modules|install-modules|tidy-modules)
			EVENT=`echo $HOOK | tr a-z- A-Z_`
			if [ -n "$PRE" ]
			then eval RUN_$PRE$EVENT=$VALUE
			else eval RUN_PRE_$EVENT=$VALUE RUN_POST_$EVENT=$VALUE
			fi
			;;

		(pre|post)
			if [ -n "$PRE" ]; then
				error 1 event $HOOK cannot have pre-/post- prefix
			fi
			EVENT=`echo $HOOK | tr a-z- A-Z_`
			eval RUN_$EVENT=$VALUE
			;;

		(*) error 1 unknown event: "$HOOK"; ;;
		esac
	done

	if [ $NUMARGS -eq 4 ] && [ $ADD_ARGS -eq 4 ]; then
		INSTALL_IMAGE=y
		UPDATE_SYMLINKS=y
		UPDATE_LOADER=y
	fi


	##
	## Print header and start logging
	##
	if [ -n "$LOG_FILE" ] || [ -n "$LOG_AUTO" ]; then
		if [ -n "$LOG_AUTO" ]; then LOG_FILE=installkernel-log; fi
		if [ -n "$LOG_AUTO" ] && [ -f "$LOG_FILE" ]; then
			I=1
			while [ -f "$LOG_FILE.$I" ]; do I=$(( $I + 1 )); done
			LOG_FILE="$LOG_FILE.$I"
		fi
		echo "${0##*/}: logging output to '$LOG_FILE'"
		exec >>"$LOG_FILE"
		exec 2>&1
		FMT='+--- START --- installkernel log file --- %y/%m/%d %H:%M:%S ---'
		if [ -n "$DRY_RUN" ]; then FMT="$FMT [dry run]"; fi
		date "$FMT"
		LOG_AUTO=started
	fi

	header Starting

	export INSIDE_INSTALLKERNEL=y
	if [ -n "$VERBOSE" ]; then V=v; VOPT=-v; fi
	if [ -n "$REALLY_VERBOSE" ]; then MAKEV='v=1'; MAKEV=; fi

	##
	## Calculate nice
	##
	if [ "X$NICE" = Xauto ]; then
		NICE=$((10 - `nice`))
		if [ $NICE -lt 0 ]; then NICE=0; fi
	fi
	NICE=`toInt "$NICE"`
	if [ $NICE -ne 0 ]; then msg '37;1' NICE "$NICE"; fi


	##
	## Set ARCH
	##
	if [ -z "$ARCH" ]; then
		ARCH=`uname -m | sed -e 's/i.86/i386/' -e 's/sun4u/sparc64/' \
	                         -e 's/arm.*/arm/' -e 's/sa110/arm/' \
	                         -e 's/s390x/s390/' -e 's/parisc64/parisc/'`
		msg '37;1' ARCH "$ARCH"
	fi


	##
	## Become root ?
	##
	if [ -n "$SU" ] && [ "`id -u`" -ne 0 ]; then
		msg '37;1' SU "Becoming super user"
		unset SU
		NICETMP="$NICE";
		NICE=0

		if [ -n "$DRY_RUN" ]; then
			echo Here you would be asked for root password.
		else
			ARGS="'`echo "$0" | sed -e "s/'/'\\\\''/"`'"
			while [ $# -ne 0 ]; do
				ARGS="$ARGS '`echo "$1" | sed -e "s/'/'\\\\''/"`'"
				shift
			done
			if [ "$NICETMP" -ne 0 ]
			then exec nice -n "$NICETMP" su -c "$ARGS"
			else exec                    su -c "$ARGS"
			fi
			exit $?
		fi
	fi
else
	if [ -n "$VERBOSE" ]; then V=v; VOPT=-v; fi
	if [ -n "$REALLY_VERBOSE" ]; then MAKEV='v=1'; MAKEV=; fi
fi


##
## Patching and changing directories
##
while [ -n "$1" ]; do
	if [ "X$1" = Xcd ]; then
		msg '37;1' CD "$2"
		run -f cd -- "$2"
		shift 2
		continue
	fi

	if [ "X$1" != Xpatch ]; then error 3 Internal error; fi

	ARG="$2"
	if expr "X$ARG" : "X!" >/dev/null 2>&1
	then FORCE=y  ; ARG="${ARG#!}"; else FORCE=  ; fi
	if expr "X$ARG" : "X@" >/dev/null 2>&1
	then REVERSE=R; ARG="${ARG#@}"; else REVERSE=; fi
	if [ -n "$VERBOSE" ]; then REVERSE="s$REVERSE"; fi

	LEVEL=`expr "X$ARG" : 'X\([0-9][0-9]*\):' 2>/dev/null || true`
	if [ "X$LEVEL" != X ]; then ARG="${ARG#$LEVEL:}"; else LEVEL=1; fi

	if   expr "X$ARG" : X=  >/dev/null 2>&1; then ARG="${ARG#=}"
	elif expr "X$ARG" : X-- >/dev/null 2>&1; then ARG="${ARG#--}"
	fi

	[ -f "$ARG" ] || error 2 "$ARG: missing"
	[ -r "$ARG" ] || error 2 "$ARG: unreadable"

	msg '37;1' DECOMP "$ARG"
	run rm -f /tmp/installkernel-$$
	case "$ARG" in
	(*.bz2) run -uio "$ARG" /tmp/installkernel-$$  bzip2    -d$V; ;;
	(*.gz)  run -uio "$ARG" /tmp/installkernel-$$  gzip     -d$V; ;;
	(*.Z)   run -uio "$ARG" /tmp/installkernel-$$  compress -d$V; ;;
	(*)     run -u ln -s$V "$ARG" /tmp/installkernel-$$; ;;
	esac

	if [ -z "$FORCE" ]; then
		msg '37;1' TEST "$ARG"
		run -i /tmp/installkernel-$$ patch -${REVERSE}p$LEVEL --dry-run
	fi

	msg '37;1' APPLY "$ARG"
	run -i /tmp/installkernel-$$ patch -f${REVERSE}p$LEVEL
	run rm -f$V /tmp/installkernel-$$
	shift 2
done


##
## Make dep?
##
if [ -n "$COMPILE_IMAGE" ] && [ "X$MAKE_DEP" = Xauto ]; then
	update_ver
	if expr "X$VER" : 'X2\.4\.' >/dev/null 2>&1
	then MAKE_DEP=y; else MAKE_DEP=; fi
elif [ "X$MAKE_DEP" = Xauto ]; then
	MAKE_DEP=
fi


##
## Check config type
##
if [ -n "$CONFIG" ] && [ "X$CONFIG_TYPE" = Xauto ]; then
	if [ -n "$DISPLAY" ]; then
		if   which qtconfig   >/dev/null 2>&1; then CONFIG_TYPE=xconfig
		elif which gtk-config >/dev/null 2>&1; then CONFIG_TYPE=gconfig
		fi
	fi

	if [ "X$CONFIG_TYPE" = Xauto ]; then
		for DIR in /usr/lib /usr/local/lib /lib; do
			for LIB in curses.a curses.so ncurses.a ncurses.so; do
				if [ -f "$DIR/lib$LIB" ]; then
					CONFIG_TYPE=menuconfig
					break 2
				fi
			done
		done
	fi

	if [ "X$CONFIG_TYPE" = Xauto ]; then CONFIG_TYPE=config; fi
fi


##
## make *
##
ur CLEAN           'Cleaning previous compilation' make $MAKEV clean
ur CONFIG          'Configuring the kernel'        make $MAKEV "$CONFIG_TYPE"
ur MAKE_DEP        'Updating dependencies'         make $MAKEV dep
ur COMPILE_IMAGE   'Compiling bzImage'             make $MAKEV bzImage
ur COMPILE_MODULES 'Compiling modules'             make $MAKEV modules
 r INSTALL_MODULES 'Installing modules'            make $MAKEV modules_install


##
## Removing old images
##
if [ -n "$TIDY_IMAGE" ]; then
	header Removing old image
	run_scripts pre-tidy-image

	for FILE in bzImage System.map config; do
		msg '37;1' READLNK "$FILE~"
		run -d readlink "/boot/$FILE~"
		LNK=`readlink "/boot/$FILE~" || true`
		if [ -f "/boot/$LNK" ]; then
			msg '37;1' RM "$LNK"
			run rm -f$V -- "/boot/$LNK"
		fi
	done

	run_scripts post-tidy-image
fi


##
## Removing old modules
##
if [ -n "$TIDY_MODULES" ]; then
	header Removing old modules
	run_scripts pre-tidy-modules

	update_ver

	msg '37;1' READLNK bzImage
	run -d readlink /boot/bzImage
	if OVER="`readlink /boot/bzImage` 2>/dev/null"; then
		OVER=${OVER#bzImage-}
		OVER=`printf "%s" "$OVER" | sed -e 's/\(-#[0-9][0-9]*\)\?~*$//'`
	fi

	msg '37;1' READLNK bzImage~
	run -d readlink /boot/bzImage~
	if OOVER="`readlink /boot/bzImage` 2>/dev/null"; then
		OOVER=${OVER#bzImage-}
		OOVER=`printf "%s" "$OOVER" | sed -e 's/\(-#[0-9][0-9]*\)\?~*$//'`
	fi

	if [ -n "$OOVER" ] && [ "X$OOVER" != "X$VER" ] && \
	   [ "X$OOVER" != "X$OVER" ] && [ -d "/lib/modules/$OOVER" ]; then
		msg '37;1' RMDIR "/lib/modules/$OOVER"
		run rm -rf$V -- "/lib/modules/$OOVER"
	fi

	run_scripts post-tidy-modules
fi


##
## Copying image
##
if [ -n "$INSTALL_IMAGE" ]; then
	header Installing kernel
	run_scripts pre-install-image

	update_ver
	update_build
	if [ -z "$IMG_PATH" ]; then IMG_PATH="arch/$ARCH/boot/bzImage"; fi
	if [ -z "$MAP_PATH" ]; then MAP_PATH="System.map"; fi

	mkdir -p -m u=rwx,g=rx,o=rx /boot

	msg '37;1' CP bzImage
	backup "/boot/bzImage-$FVER"
	run cp $VOPT -- "$IMG_PATH" "/boot/bzImage-$FVER"

	msg '37;1' CP System.map
	backup "/boot/System.map-$FVER"
	run cp $VOPT -- "$MAP_PATH" "/boot/System.map-$FVER"

	msg '37;1' CP .config
	backup "/boot/config-$FVER"
	run cp $VOPT -- .config "/boot/config-$FVER"

	run_scripts post-install-image
fi



##
## Updating symlinks
##
if [ -n "$UPDATE_SYMLINKS" ]; then
	header Updating symlinks
	run_scripts pre-update-symlinks

	update_ver
	update_build

	for FILE in bzImage System.map config; do
		msg '37;1' READLNK "$FILE"
		run -d readlink /boot/$FILE || true
		LNK="`readlink "/boot/$FILE" || true`"
		if [ "X$LNK" = "X$FILE-$FVER" ]; then
			msg '37;1' LNK "$FILE~"
			run rm -f$V -- /boot/$FILE~
			run ln -s$V -- $FILE-$FVER~ /boot/$FILE~
		else
			msg '37;1' LNK "$FILE"
			run mv -f$V -- /boot/$FILE /boot/$FILE~ || true
			run ln -fs$V -- $FILE-$FVER /boot/$FILE
		fi
	done

	run_scripts post-update-symlinks
fi



##
## Running LILO
##
 r UPDATE_LOADER   'Updating bootloader'           lilo $VOPT



run_scripts post
