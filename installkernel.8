.TH installkernel 8 "11 August, 2005" "version 0.11" "Linux System Administration"
.SH NAME

\fBinstallkernel\fP \- compiles and installs the Linux kernel.

.SH SYNOPSIS

\fBinstallkernel\fP [<options>] [<switches>] [<actions>]
[\fIversion\fP [\fIimage\fP [\fIsystemmap\fP]]]

.SH DESCRIPTION

\fBinstallkernel\fP is a shell script ment to automate process of
compiling and installing the Linux kernel and it's modules.  It can
automatically patch the kernel source tree, compile and install kernel
image and modules run lilo and remove old images and modules.  When
additional scripts are added it can also automatically install modules
which are not part of Linux or perform some other tasks specific for
local machine.

.SH ARGUMENTS

The scripts takes 4 kinds of arguments.  Options, switches and
actions.  Switches are options which may be toggled on and off.
Actions can be specified several times and instruct
\fBinstallkernel\fP script to perform various steps.  Those steps are
taken in the order actions are given in the command line.

.PP
If you use short option which requires an argument (eg. \fB\-a\fP) the
argument must be specified just after the option without whitespace
or anything (eg. \fB\-ai386\fP).  The script also doesn't support
joining several short options in one argument, eg.: \fB \-iImM\fB.

.SS Options
.TP
\fB\-h \-\-help\fP
displays a help screen and exits

.TP
\fB\-V \-\-version\fP
displays the version number and exits

.TP
\fB\-a \-\-arch=\fIarch\fP
sets the \fBARCH\fP environmental variable to \fIarch\fP.  By default,
it is generated from the output of \fBuname \-m\fP command.  In all
cases, if \fBARCH\fP environmental variable is set before
\fBinstallkernel\fP have been run it will be overwritten.

.TP
\fB\-\-su\fP
If the script was not run as super user it will try to become super
user at the beginning.  Most likely, you will be asked to enter a root
password at the beginning of the script.  The option also implies
.B \-\-user=\fIcurrent\-user\fP.

.TP
\fB\-u \-\-user=\fIuser\fP
Runs all commands which do not require super user privileges (this
include patching, cleaning sources, updating dependencies (in 2.4.x)
and compiling image and modules) as \fIuser\fP.

.TP
\fB\-nu \-\-no\-user\fP
This is synonym of \fB\-\-user=\fP.  Useful if you want to do
everything as root and use \fB\-\-su\fP option.

.TP
\fB\-\-nice=\fInice\fP
Increments a nice value by \fInice\fP.  By default the script sets the
nice value to 10 (NOT increments by 10) unless it is already greater
then 10.  Setting this to a big value (eg. 20) is useful if you don't
want compilation to be noticeable.

.TP
\fB\-\-no\-nice\fP
Synonym of \fB\-\-nice=0\fP.

.TP
\fIversion\fP \fIimage\fP \fIsystemmap\fP
Those are the version number, the path to the kernel image file and
path to the kernel map file.  Those arguments rather unnecessary as the
script detects all this by itself but they are provided for
compatibility with \fBmake install\fP (however, the compatibility is
not yet reached).

.SS Switches

.TP
\fB\-\-dry\-run\fP
only prints what would be done.  This implies
\fB\-\-print\-commands\fP.  \fBWARNING\fP In some cases it DO modify
the source tree.  In various situations the script needs to know the
version number of the Linux kernel.  To get this piece of information
it needs to update \fBinclude/linux/version.h\fP file and therefore it
runs \fBmake include/linux/version.h\fP.  The default is \fBno\fP.

.TP
\fB\-\-print\-commands\fP
Before each command is executed it is first printed to the stdout.
The default is \fBno\fP.

.TP
\fB\-\-v \-\-verbose\fP
Becomes a lot more verbose.  The default is \fBno\fP.

.TP
\fB\-\-color\fP
Uses ANSI escape sequences to print messages in color.  By default,
this is on if writing to a terminal.  There are some bugs, however,
so if you use \fB>\fP to log messages use \fB\-\-no\-color\fP option
to be sure.

.TP
\fB\-\-run\-hooks\fP
Runs all hooks.  The default is \fByes\fP.  See HOOKS section below.

.TP
\fB\-\-run\-pre\-hooks\fP
Runs all pre\-* hooks.  The default is \fByes\fP.  See HOOKS section
below.

.TP
\fB\-\-run\-post\-hooks\fP
Runs all post\-* hooks.  The default is \fByes\fP.  See HOOKS section
below.

.TP
\fB\-\-run\-\fIhook\fP
Runs \fIhook\fP.  The default is \fByes\fP.  See HOOKS section below.

.TP
\fB\-\-run\-\fIevent\fP
Runs pre\-\fIevent\fP and post\-\fIevent\fP hooks.  The default is
\fByes\fP.  See HOOKS section below.

.TP
\fB\-c \-\-clean\fP
Runs \fBmake clean\fP at the beginning.  The default is \fBno\fP.

.TP
\fB\-d \-\-make\-dep\fP
Runs \fBmake dep\fP.  The default is to run it if
\fB\-\-compile\-image\fP is on and compiling the Linux 2.4.x (\fBmake
dep\fP is unnecessary in Linux 2.6.x).

.TP
\fB\-A \-\-all\fP
Synonym of \fB\-\-compile \-\-install \-\-tidy \-\-update\-symlinks
\-\-run\-lilo\fP.

.TP
\fB\-i \-\-compile\-image\fP
Runs \fBmake bzImage\fP to compile the kernel image.  The default is
\fBno\fP.

.TP
\fB\-I \-\-install\-image\fP
Installs the kernel image by copying appropriate files to \fB/boot\fP
directory. The default is \fByes\fP.

.TP
\fB\-\-tidy\-image\fP
Removes really old kernel images from the \fB/boot\fP directory.  The
default is \fBno\fP.

.TP
\fB\-\-image\fP
Synonym of \fB\-\-compile\-image \-\-install\-image \-\-tidy\-image\fP.

.TP
\fB\-m \-\-compile\-modules\fP
Runs \fBmake modules\fP to compile the kernel modules.  The default is
\fBno\fP.

.TP
\fB\-M \-\-install\-modules\fP
Runs \fBmake modules_install\fP to install kernel modules.  The
default is \fBno\fP.

.TP
\fB\-\-tidy\-modules\fP
Removes old kernel modules from \fB/lib/modules\fP directory.  The
default is \fBno\fP.

.TP
\fB\-\-modules\fP
Synonym of \fB\-\-compile\-modules \-\-install\-modules
\-\-tidy\-modules\fB.

.TP
\fB\-\-compile\fP
Synonym of \fB\-\-compile\-image \-\-compile\-modules\fP.

.TP
\fB\-\-install\fP
Synonym of \fB\-\-install\-image \-\-install\-modules\fP.

.TP
\fB\-\-tidy\fP
Synonym of \fB\-\-tidy\-image \-\-tidy\-modules\fP.

.TP
\fB\-s \-\-update\-symlinks\fP
Updates symlinks in \fB/boot\fP directory.  This should not be on
without \fB\-\-install\-image\fP.  The default is \fByes\fP.

.TP
\fB\-\-symlinks\fP
Deprecated synonym of \fB\-\-update\-symlinks\fP.

.TP
\fB\-l \-\-update\-loader\fP
Updates the loader program.  At the moment this is done by running
\fBlilo\fP.  The default is \fByes\fP.

.TP
\fB\-\-lilo\fP
Deprecated synonym of \fB\-\-update\-loader\fP.

.PP
Passing one of the switches as an argument will turn it \fBon\fP
unless it is prefixed with \fBno\-\fP (if long form is used) or
\fBn\fP (if short form is used).  If a switch is synonym of several
other switches then all those switches will be turned on or off.

.SS Actions

.TP
\fB\-\-cd=\fIdir\fP
Changes the directory to \fIdir\fP.

.TP
\fB\-\-cd\fP
Synonym of \fB\-\-cd/usr/src/linux

.TP
\fB\-p \-\-patch=\fIpatch\fP
Applies specified \fIpatch\fP in the current working directory.
Patches are automatically decompressed if required.  The first character
of \fIpatch\fP may be an exclamation mark ("!") which means that the
patch should be applied even if some errors arise during patching.
Also "\-r" may be used which means to apply it as a reverse patch.
Next a number fallowed by a colon may indicate an argument which should
be given to \fB\-p\fP option of \fBptch\fP (the default is \fB1\fP).
Then a quotation mark ("=") or double dashes ("\-\-") may exist.  The
rest is treated as a path to the patch file.

.PP
Each action may be specified several times.  They are executed in the
given order so \fB\-\-cd \-\-patch=foo.diff\fP is something different
then \fB\-\-patch=foo.dif \-\-cd\fP.  This makes sens if you want to
apply several patches in different points of the Linux kernel source
tree.

.SH HOOKS

Hooks were provided to allow executing of user customizable code which
sometimes is necessary for a particular machine.  For example one could
write a script which automatically installs nVidia drivers after the
kernel modules are installed.  Someone else could write a short script
which reboots the machine after the new kernel is installed or could
kill some resource consuming daemons just before compilation to run
them again after compilation is done.  There are many aspects in which
hooks may be handy.

.PP
There are events and hooks.  Events are: \fBclean\fP, \fBmake\-dep\fP,
\fBcompile\-image\fP, \fBcompile\-modules\fP, \fBinstall\-modules\fP,
\fBtidy\-image\fP, \fBtidy\-modules\fP, \fBinstall\-image\fP,
\fBupdate\-symlinks\fP and \fBupdate\-loader\fP.  As you can see each
event corresponds to each step of the \fBinstallkernel\fP script.
Each event has a \fBpre\-\fP and \fBpost\-\fP hook.  So for example
there are \fBpre\-clean\fP and \fBpost\-clean\fP hooks.  There are
also \fBpre\fP and \fBpost\fP hooks which are executed at the very
begining and at the very end of the \fBinstallkernel\fP script.

.PP
When a hook is executed then all executable scripts from
\fB/etc/installkernel.d/\fP and
\fB/etc/installkernel.d/\fIhook\-name\fP/\fR directories are run
with the hook name as the first argument (in the future more arguments
may be defined).  For example if there is an executable file \fBfoo\fP
in \fB/etc/installkernel.d/\fP and \fBbar\fP in
\fB/etc/installkernel.d/pre/\fP then when \fBpre\fP hook is executed
both, \fBfoo\fP and \fBbar\fP, scripts will be run but when a
\fBpre\-clean\fP hook is executed only \fBfoo\fP will be executed.  To
understand it better create some scripts in \fB/etc/installkernel.d\fP
and it's subdirectories and run \fBinstallkernel\fP with
\fB\-\-dry\-run\fP option.

.SH EXAMPLES

.TP
\fB$ installkernel \-\-su \-\-cd \-\-all \-\-nice=20\fP
Does everything (compiles the kernel image and modules then installs
them and removes old ones and update symlinks and loader at the end).
At the beginning asks for root password so when super user privileges
are required the script will use them however everything else
(compiling) will be run as a user who run the script.  The script will
also change the directory to \fB/usr/src/linux\fP for you.

.TP
\fB$ installkernel \-\-su \-\-no\-user \-\-cd \-\-all\fP
Similar to the above but everything will be run as super user (even
build process).

.TP
\fB$ installkernel \-\-su \-\-cd \-\-no\-all \-\-modules\fP
Will compile, install and tidy the kernel modules only.

.TP
\fB$ installkernell \-\-no\-all \-\-cd \-\-patch=!\-r=../patch\-foo\-1\-\-patch=!\-\-../patch\-foo\-2 \-\-compile\fP
Applies a \fBpatch\-foo\-1\fP patch in reverse mode then applies a
\fBpatch\-foo\-2\fP patch and at the end compiles the kernel image and
modules.  Useful if there is no incremental patch from \fBfoo-1\fP to
\fBfoo-2\fP.  Note that patches are forced (by exclamation mark) so
even if there are some rejections the script will continue.

.TP
\fB$ installkernel \-\-all \-\-su \-\-cd \-\-no\-color >~/installkernel\-log 2>&1 && /sbin/reboot
Something for lazy sysadmins.  This will do everything to get a new
kernel image work and if everything went OK system will reboot.  All
messages will be logged to \fBinstallkernel-log\fP file for future
analyze if something failed.  \fBBeware\fP, however, that it's not
very wise to get system automatically reboot without sysadmin.  You
should rather reboot the system when you get back the next day ;).
You may however replace \fB/sbin/reboot\fP with \fB/sbin/halt\fP to
run a nightly compilation.  Note that you have to have \fBreboot\fP
and \fBhalt\fP properly configured for a non-root user to be able to
run.

.SH AUTHOR

Michal Nazarewicz (\fImina86/AT/tlen.pl\fP).  See
<\fIhttp://tinyapps.sourceforge.net/\fP> for more info.
