#! /usr/bin/perl -w

use strict;
use warnings;

use URI::URL;
use URI::file;
use LWP::UserAgent;
use File::Spec;


sub err (@) { print STDERR join(': ', 'wp', @_), "\n"; }
sub d (@) { die join(': ', 'wp', @_), "\n"; }

my $URL = 'http://tv.o2.pl/program/';
my $ua = LWP::UserAgent->new;
sub download (;$$);



##
## Find home dir
##
sub _dir ($) { defined $_[0] && -d $_[0] ? $_[0] : undef; }
my $HOME = (
	_dir $ENV{'HOME'} or
	_dir $ENV{'LOGDIR'} or
	_dir eval { local $SIG{'__DIE__'} = ''; (getpwuid($<))[7]; } or
	_dir eval {
		use File::Glob ':glob';
		my $h = File::Glob::bsd_glob('~', GLOB_TILDE);
		$h eq '~' ? undef : $h;
	} or
	_dir $ENV{'USERPROFILE'} or
	_dir do {
		if ($ENV{HOMEDRIVE} && $ENV{HOMEPATH}) {
			File::Spec->catpath($ENV{HOMEDRIVE}, $ENV{HOMEPATH}, '');
		} else {
			undef;
		}
	} or
	_dir eval {
		require Mac::Files;
		Mac::Files::FindFolder(
			Mac::Files::kOnSystemDisk(),
			Mac::Files::kDesktopFolderType(),
			);
	}
) or d "could not localize home directory";

$HOME = File::Spec->catdir($HOME, '.tv');
d 'mkdir', $HOME, "$!" unless -d $HOME || mkdir $HOME;



##
## Read configuration
##
$_ = File::Spec->catfile($HOME, 'config');
our %CFG;
if (-f && -s _) {
	do $_;
	d $_, "parse error", "$@" if $@;
	d $_, "read error", "$!" if $!;
}



##
## Read channels list
##
my %tvs;
if (-s $HOME . '/list') {
	d 'open', $HOME . '/list', "$!" unless open FH, '<', $HOME . '/list';
	while (<FH>) {
		$tvs{$2} = $1 if m/^(\d+):(.+\S)\s*$/;
	}
	close FH;
	err $HOME . '/list', 'exists but seems to be empty' unless %tvs;
}

# Download channels list
unless (%tvs) {
	$_ = download() or die;
	s/^[.\n]*name="id_stacja"//;
	for (split /\n+/) {
		last if m#</select>#;
		$tvs{$2} = $1 if m/value=(\d+)\s*>\s*([^\s>][^>]*\S)\s*$/;
	}

	d 'no stations found' unless %tvs;
	if (open FH, '>', $HOME . '/list') {
		print FH $tvs{$_}, ':', $_, "\n" for (keys %tvs);
		close FH;
	} else {
		err 'open', $HOME . '/list', "$!"
	}
}


##
## No arguments or --help
##
if (!@ARGV && defined $CFG{'default_argv'}) {
	if (ref $CFG{'default_argv'} eq 'ARRAY') {
		@ARGV = @{$CFG{'default_argv'}}
	} elsif (!ref $CFG{'default_argv'}) {
		@ARGV = ( $CFG{'default_argv'} );
	}
}

if (!@ARGV || $ARGV[0] eq '--help' || $ARGV[0] eq '--h') {
	print "usage: tv <station-pattern> [ <station-pattern> ... ]\n";
	print "Available stations:\n * ", join("\n * ", sort keys %tvs), "\n";
	exit 0;
}


##
## Get channels ids
##
my $regexp = join '|', @ARGV;
my @ids = @tvs{ grep { /^(?:$regexp)$/io } keys %tvs };


##
## Get programm for each station
##
my %prog;
my ($sec, $min, $HOUR) = localtime;
$HOUR = $HOUR * 100 + $min;
sub add ($$$$) {
	my ($chan, $hour, $title, $desc) = (@_);
	foreach ($chan, $hour, $title, $desc) {
		s/^\s+|\s+$//g if defined;
	}

	# FIXME:
	return unless $hour > ($HOUR - 100);

	$prog{$chan} = [ ] unless defined $prog{$chan};
	push @{$prog{$chan}}, [ $chan, $hour, $title, $desc ];
}

for (@ids) {
	my ($d, $prev, $chan, $hour, $title) = (0);
	for (split /\n+/, download $_, 0) {
		# Channel name
		if (m#class=t3.*<b>\s*(\S[^<>]*\S)\s*</b>#) {
			$chan = $1;
			next;
		}
		next unless defined $chan;

		# Hour
		if (m~<font color="(?:#......)?">(?:<b>)?(\d\d):(\d\d)(?:</b>)?</font>~) {
			if (defined $title) {
				$prev = $hour;
				add($chan, $hour, $title, undef);
				undef $title;
			} elsif (defined $hour) {
				err $chan, $hour, 'missing entry';
			}
			$hour = $d . $1 . $2;
			++$d if defined $prev && $prev>$hour;
			next;
		}
		next unless defined $hour;

		# Title
		if (m~<font class=t1 color=#......><b>(.*)</b></font>~) {
			$title = $1;
			next;
		}
		next unless defined $title;

		# Description
		if (m~<nobr>-(.*)</nobr>~) {
			$prev = $hour;
			add($chan, $hour, $title, $1);
			undef $hour;
			undef $title;
		}
	}

	# Add pending item
	if (defined $title) {
		add($chan, $hour, $title, undef);
		undef $hour;
	}
}



##
## Print everything
##
exit 0 unless %prog;
my $short = 1 == keys %prog;
my $len = 0;
for (keys %prog) {
	$len = length if length > $len;
}

my @prog;
push @prog, @{$_} for (values %prog);
@prog = sort {
	($a->[1] <=> $b->[1]) || (lc($a->[2]) cmp lc($b->[2]));
} @prog;


print "     ========== " . (keys %prog)[0] . " ==========\n" if $short;
for (@prog) {
	printf "%-${len}s ", $_->[0] unless $short;
	print substr($_->[1], -4), ' ';
	print $_->[2];
	print ' --', $_->[3] if defined $_->[3];
	print "\n";
}



##
## Downloads page
##
sub download (;$$) {
	# Main page
	my $res;
	unless (@_) {
		$res = $ua->get($URL);
		if ($res->is_success) {
			return $res->content;
		} else {
			err $URL, $res->status_line;
			return '';
		}
	}

	my ($id, $day) = (@_, 0);
	my $f = $HOME . '/cache/' . $id . '.' . $day;

	# Check cache
	if (-f $f && stat($f) && int((stat _)[9]/24/3600) == int(time()/24/3600)
		&& open FH, '<', $f) {
		$f = join '', <FH>;
		close FH;
		return $f;
	}

	# Download
	my $u = $URL . '?id_stacja=' . $id . '&dzien=' . $day;
	$res = $ua->get($u);
	unless ($res->is_success) {
		err $u, $res->status_line;
		return '';
	}

	# Save cache
	if (-d $HOME . '/cache' && open FH, '>', $f) {
		print FH $res->content;
		close FH;
	}

	# Return
	return $res->content;
}
