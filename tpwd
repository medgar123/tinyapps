#!/bin/sh
##
## Truncates pwd to specified number of characters
## $Id: tpwd,v 1.5 2007/08/09 07:53:08 mina86 Exp $
## Copyright (c) 2005 by Michal Nazareicz (mina86/AT/mina86.com)
##
## This software is OSI Certified Open Source Software.
## OSI Certified is a certification mark of the Open Source Initiative.
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
## This is part of Tiny Applications Collection
##   -> http://tinyapps.sourceforge.net/
##


## Generic function
if [ X"$1" = X--function ]; then
cat <<EOF
	tpwd () {
		set -- \$? "\$@"
		if [ X"\$2" != X-n ] || [ X"\${3#-}" != X"\$3" ] || [ \$# -gt 6 ] || \
			[ -z "\$HOME" ]; then shift; "\$(which tpwd)" "\$@"; return; fi
		set -- \$1 "\${3:-30}" "\${4-...}" "\$5" "\${6:-\$PWD}"
		[ X"\$5" = X"\${5#\$HOME}" ] || \
			set -- "\$1" "\${2:-30}" "\${3-...}" "\$4" "~\${5#\$HOME}"

		if [ \${#5} -le \$2 ] || [ \${4:-\${#3}} -ge \$2 ]
		then printf %s "\$5"; return \$1; fi
		printf %s "\$3"; set -- \$1 "\$(( \$2 - \${4:-\${#3}} ))" "\${5#?}"
		while [ \${#3} -gt \$2 ]; do set -- \$1 "\$2" "\${3#?}"; done
		printf %s "\$3"; return \$1
	}
EOF
	exit
fi


## Bash function
if [ X"$1" = X--bash ]; then
	cat <<EOF
tpwd () {
	local EC=\$? P="\$PWD" E="echo" ARGS=( \$@ )
	if [ X"\$1" = X-P ] || [ X"\$1" = X-L ]; then P="\$(pwd \$1)"; shift; fi
	if [ X"\$1" = X-n ]; then E='printf %s'; shift; fi
	if [ \$# -gt 4 ] || [ X"\${1#-}" != X"\$1" ] || [ -z "\$HOME" ]
	then "\$(which tpwd)" "\${ARGS[@]}"; return \$?; fi

	P="\${4-\$P}"; P="\${P/#\$HOME/~}"
	if [ \${#P} -le \${1:-30} ]
	then \$E "\$P"
	else \$E "\$2\${P:\$(( \${#P} - \${1:-30} + \${3:-\${#2}} ))}"
	fi
	return \$EC
}
EOF
	exit
fi


## PWD
if [ X"$1" = X-P ] || [ X"$1" = X-L ]
then P="$(pwd $1)"; shift
else P="$PWD"; fi

## New line
if [ X"$1" = X-n ]; then E='printf %s'; shift; else E=echo; fi

## Usage
if [ $# -gt 4 ] || [ X"${1#-}" != X"$1" ]; then
	cat <<EOF
usage: tpwd [ -L | -P ] [ -n ] [<len> [<trunc> [<tlen> [<path>]]]]
       eval "\$(tpwd --bash)"      defines bash function
       eval "\$(tpwd --function)"  defines generic POSIX shell function
 -L       uses  'pwd -L'  instead of  \$PWD
 -P       uses  'pwd -P'  instead of  \$PWD
 -n       doesn't print new line character at the end
 <len>    maximum length of printed string                       [30]
 <trunc>  string to print at the beginning if pwd was trunced   [...]
 <tlen>   length of <trunc> (useful if using ANSI codes)
 <path>   path to use instead of \$PWD

It might be used in PS1 varaible to truncate very long PWD's which
normaly would took a whole line (or more), eg:
    PS1='[\\u@\\h \$(tpwd -n 30 {)]\\$ '     # works in bash

EOF
	[ X"$1" = X"--help" ] || [ X"$1" = X"-h" ]
	exit $?
fi

## PWD
P="${4-$P}"; H="${HOME:-$(eval echo ~$(id -un))}"; H="${H%/}"
if                [ X"$P" != X"${P#//}" ]; then P="${P#/}"  ; fi
if [ -n "$H" ] && [ X"$P" != X"${P#$H}" ]; then P="~${P#$H}"; fi

## Short enough or trunc too long
LEN=${1-30}
if [ ${#P} -le $LEN ]; then $E "$P"; exit; fi
TRUNC=${2-...}; LEN=$(( $LEN - ${3-${#TRUNC}} ))
if [ $LEN -le 0 ]; then $E "$TRUNC"; exit; fi

## Print
if [ -n "$BASH_VERSION" ]
then $E "$TRUNC${P:$(( ${#P} - $LEN ))}"
else while [ ${#P} -gt $LEN ]; do P="${P%?}"; done; $E "$TRUNC$P"
fi
